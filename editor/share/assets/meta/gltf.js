"use strict";const e=require("fire-fs"),t=require("fire-path"),s=require("./mesh"),i=require("./prefab"),a=require("./skeleton-animation-clip"),r=require("./skeleton"),o=require("./buffer"),n=Editor.require("app://editor/core/common-asset-worker"),l=e.readJsonSync(Editor.url("unpack://static/default-assets/prefab/sprite.prefab"));module.exports=class extends Editor.metas.asset{constructor(e){super(e),this.scaleFactor=1,this._gltf={},this._bufferUuids=[],this._modelName=""}static version(){return"1.0.4"}static defaultType(){return"gltf"}deserialize(e){super.deserialize(e);let n={};for(let l in e.subMetas){let u,h=e.subMetas[l],d=t.extname(l);if(".mesh"===d?u=s:".sac"===d?u=a:".skeleton"===d?u=r:".prefab"===d?u=i:".bin"===d&&(u=o),!u){Editor.warn(`Can not find meta class for submeta ${l}`);continue}let m=new u(this._assetdb);m.deserialize(h),n[l]=m}this.updateSubMetas(n)}_createMeshMeta(e,t,i){let a=e.meshes||[];const r=e.accessors;for(let e=0;e<a.length;e++){let o,n=a[e],l=n.name+".mesh";o=t[l]?t[l]:new s(this._assetdb);let u=0,h=0,d=n.primitives,m=cc.v3(1/0,1/0,1/0),c=cc.v3(-1/0,-1/0,-1/0);for(let e=0;e<d.length;e++){let t=d[e];if(void 0===t.indices)continue;const s=r[t.attributes.POSITION];if(!s)continue;u+=s.count;let i=s.min,a=s.max;m.x=Math.min(m.x,i[0]),m.y=Math.min(m.y,i[1]),m.z=Math.min(m.z,i[2]),c.x=Math.max(c.x,a[0]),c.y=Math.max(c.y,a[1]),c.z=Math.max(c.z,a[2]),h+=r[t.indices].count}o.verts=u,o.tris=h/3,o.submeshes=d.length,o.minPos=m,o.maxPos=c,o.modelUuid=this.uuid,o.meshID=e,i[l]=o}}_createSkeletonMeta(e,t,s){let i=e.skins||[];for(let e=0;e<i.length;e++){i[e];let a,o=`${this._modelName}-${e}.skeleton`;(a=t[o]?t[o]:new r(this._assetdb)).modelUuid=this.uuid,a.skinID=e,s[o]=a}}_createSkeletonAnimationMeta(e,t,s){let i=e.animations||[];for(let e=0;e<i.length;e++){let r,o=i[e].name;-1!==this._modelName.indexOf("@")&&(o=this._modelName.split("@")[1],0!==e&&(o+="_"+e));let n=o+".sac";(r=t[n]?t[n]:new a(this._assetdb)).name=o,r.modelUuid=this.uuid,r.animationID=e,s[n]=r}}_createPrefabMeta(e,t,s){let a=this._modelName+".prefab";t[a]?s[a]=t[a]:s[a]=new i(this._assetdb),s[a].content=l,s[a].readonly=!0}_createBufferMeta(){}_createSubMetas(){let e=this.getSubMetas(),t={},s=this._gltf;this._createBufferMeta(s,e,t),this._createMeshMeta(s,e,t),this._createSkeletonMeta(s,e,t),this._createSkeletonAnimationMeta(s,e,t),this._createPrefabMeta(s,e,t),this.updateSubMetas(t)}async importModel(s){const i=e.readJsonSync(s);this._gltf=i,i.buffers&&(this._bufferUuids=[],i.buffers.forEach(e=>{const s=t.resolve(t.dirname(gltfPath),e.uri),i=this._assetdb.fspathToUuid(s);this._bufferUuids.push(i)}))}async import(e,s){if(this._modelName=t.basenameNoExt(e),await this.importModel(e),!this._gltf)return s();this._createSubMetas();const i=[];for(let e=0;e<this._bufferUuids.length;e++){let t=this._bufferUuids[e];i.push(Editor.serialize.asAsset(t))}let a=new(Editor.require("unpack://engine-dev/cocos2d/core/3d/CCModel"));a.name=this._modelName,a._buffers=i,a._gltf=this._gltf,this._assetdb.saveAssetToLibrary(this.uuid,a),s()}async postImport(e,i){let a=[],o=[],l=this.getSubMetas();for(let e in l)l[e]instanceof s?a.push(l[e].uuid):l[e]instanceof r&&o.push(l[e].uuid);let u={gltf:this._gltf,meshIDs:a,skeletonIDs:o,modelUuid:this.uuid,modelName:this._modelName,modelPath:e,scaleFactor:this.scaleFactor},h=await n.start(Editor.url("app://editor/page/worker/create-model-prefab.js"),u),d=this._modelName+".prefab";try{l[d].content=JSON.parse(h[this._modelName])}catch(e){Editor.error(e)}l[d].import(t.join(e,d),()=>{this.updateSubMetas(l),i()})}};