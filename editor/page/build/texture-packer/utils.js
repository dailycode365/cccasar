const e=require("fire-path"),t=require("fire-fs"),r=require("lodash"),i=require("globby"),a=require("del"),s=require("./packer"),n=Editor.require("app://editor/page/build/texture-compress");class o{async init(a){let s=a.path,n=s+".meta",o=t.readJSONSync(n),u=e.dirname(a.url)+"/**/*",l=await new Promise((e,t)=>{Editor.assetdb.queryAssets(u,["sprite-frame"],(r,i)=>{if(r)return t(r);e(i)})}),m=e.dirname(s),c=[e.join(m,"**/*.pac"),"!"+e.join(m,"*.pac")],d=await new Promise((t,r)=>{i(c,(i,a)=>{if(i)return r(i);t(a.map(t=>e.dirname(t)))})});if(0===(l=l.filter(t=>{for(let r=0;r<d.length;r++)if(e.contains(d[r],t.path))return!1;return!0})).length)return Editor.warn(`No SpriteFrame find in forlder [${e.dirname(pac.url)}]. Please check the AutoAtlas [${s}].`),void 0;let p=[],f=await Promise.all(l.map(async e=>new Promise((t,r)=>{cc.AssetLibrary.loadAsset(e.uuid,(e,i)=>{if(e)return r(e);i.pacInfo=this,p.push(i.getTexture()._uuid),t(i)})})));p=r.uniq(p);let h=Editor.url("db://assets");return this.meta=o,this.info=a,this.spriteFrames=f,this.textureUuids=p,this.relativePath=e.relative(h,s),this.relativeDir=e.relative(h,e.dirname(s)),this}}async function u(i,a,s){let n=e.join(i,"info.json"),o={};t.existsSync(n)&&(o=t.readJSONSync(n));let u={mtimes:{}},l=[a.meta.uuid];return s.forEach(e=>{l.push(e._uuid),l.push(e.getTexture()._uuid)}),l=r.uniq(l),await Promise.all(l.map(async e=>{let t=await new Promise((t,r)=>{Editor.assetdb.queryMetaInfoByUuid(e,(e,i)=>{if(e)return r(e);t({assetMtime:i.assetMtime,metaMtime:i.metaMtime})})});u.mtimes[e]=t})),{storedPacInfoPath:n,newStoredPacInfo:u,storedPacInfo:o}}exports.queryAtlases=async function(e){let t={textureUuids:[],spriteFrames:[],pacInfos:[],texture2pac:{}};return e=Array.isArray(e)?e:[e],await Promise.all(e.map(async e=>{let r=await(new o).init(e);r.textureUuids.forEach(e=>{t.texture2pac[e]=r}),t.textureUuids=t.textureUuids.concat(r.textureUuids),t.spriteFrames=t.spriteFrames.concat(r.spriteFrames),t.pacInfos.push(r)})),t.textureUuids=r.uniq(t.textureUuids),t.spriteFrames=r.uniq(t.spriteFrames),t},exports.pack=async function(i){let{pacInfos:o,needPackSpriteFrames:l,dest:m,needCompress:c,platform:d}=i,p=[];for(let i=0;i<o.length;i++){let f=o[i],h=f.meta,w=cc.js.mixin({name:e.basenameNoExt(f.info.path),width:h.maxWidth,height:h.maxHeight},h),P=f.spriteFrames;if(h.filterUnused&&l){let e=Editor.url("db://assets/resources");-1!==f.info.path.indexOf(e)?Editor.warn(`AutoAtlas [${f.info.path}] is in resources dir. Option [Filter Unused] will not be used.`):P=P.filter(e=>{for(let t=0;t<l.length;t++)if(l[t]._uuid===e._uuid)return!0;return!1})}if(0===P.length)throw new Error(`No SpriteFrame provides. Please check your options. Abort pack AutoAtlas [${f.info.path}].`);let y,g=e.join(m,f.relativePath),{storedPacInfoPath:x,newStoredPacInfo:E,storedPacInfo:S}=await u(g,f,P);!r.isEqual(E.mtimes,S.mtimes)?(a.sync(g,{force:!0}),y=await new Promise((e,t)=>{s(P,w,(r,i)=>{if(r)return t(r);e(i)})}),await Promise.all(y.atlases.map(async r=>{let i=e.join(g,r.name+".png");return t.ensureDirSync(e.dirname(i)),r.imagePath=i,new Promise((e,t)=>{r.sharp.toFile(i,r=>{if(r)return t(r);e()})})})),global.gc&&global.gc(),c&&await Promise.all(y.atlases.map(async r=>{let i=e.join(g,"compressed",r.name+".png");t.ensureDirSync(e.dirname(i));let a=await new Promise((e,t)=>{n({src:r.imagePath,dst:i,platform:d,compressOption:f.meta.platformSettings},(r,i)=>{if(r)return t(r);e(i)})});0===a.length&&(a=[".png"]),r.compressd={suffix:a,imagePathNoExt:e.join(e.dirname(i),e.basenameNoExt(i))}})),E.result=y,t.ensureDirSync(g),t.writeFileSync(x,JSON.stringify(E,null,2))):(y=S.result).atlases.forEach(e=>{e.files.forEach(e=>{e.spriteFrame=P.find(t=>t._uuid===e.uuid)})}),y.pacInfo=f,p.push(y)}return p};