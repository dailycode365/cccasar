"use strict";const e=require("fire-path"),r=require("fire-fs"),t=require("xcode"),{spawn:o,spawnSync:i}=require("child_process"),s=require("./base");module.exports=class extends s{constructor(o){if(super(o),-1===process.env.PATH.indexOf("/usr/local/bin")&&(process.env.PATH+=":/usr/local/bin"),this.projectPath=e.join(o.dest,`frameworks/runtime-src/proj.ios_mac/${o.projectName}.xcodeproj/project.pbxproj`),!r.existsSync(this.projectPath))return Editor.error("Can't find xcodeproj file at path: ",this.projectPath),void 0;this.project=t.project(this.projectPath),this.project.parseSync()}addFramework(e,r){let t=!0;return this._searchTarget(r)?(this.project.addFramework(e,{customFramework:!0,target:this._searchTarget(r),embed:!0}),this._save()):t=!1,t}addFileToCompileSource(e,r,t){let o=!0,i=this._searchTarget(r),s=this._searchPBXGroup(t);return i&&s?(this.project.addSourceFile(e,{target:i},s),this._save()):o=!1,o}addFileToProject(e,r){let t=!0,o=this._searchPBXGroup(r);return o?this.project.addFile(e,o):t=!1,this._save(),t}checkPodEnvironment(){return!i("pod").error||(Editor.error("Can't find pod command , please install CocoaPods (https://cocoapods.org/)"),!1)}addPodDependenceForTarget(t,o,i){this._createPodFileIfNotExist();let s=e.join(this.options.dest,"frameworks/runtime-src/proj.ios_mac/Podfile"),a=r.readFileSync(s,"utf-8");if(-1===a.indexOf(o)&&(a+=`target '${o}' do\nend`),this.isDependenceExist(t,o,i))Editor.log("CocoaPods:",t,"is already exist,ignore update Podfile");else{let e=new RegExp(`target\\s*'${o}'\\s*do`);a=a.replace(e,e=>{let r=`  pod '${t}'`;return i&&(r+=`,${i}`),e+="\n"+r})}r.writeFileSync(s,a)}isDependenceExist(t,o,i){let s=!1;do{let i=e.join(this.options.dest,"frameworks/runtime-src/proj.ios_mac/Podfile");if(!r.existsSync(i))break;let a=r.readFileSync(i,"utf-8").match(new RegExp(`target\\s*'${o}'\\s*do(\\S|\\s|\\n|\\r|\\r\\n)+?(end)`));if(!a)break;-1!==(a=a[0]).indexOf(t)&&(s=!0)}while(0);return s}executePodFile(){return new Promise((r,t)=>{let i=o("pod",["install"],{cwd:e.join(this.options.dest,"frameworks/runtime-src/proj.ios_mac/")});i.stdout.on("data",e=>{Editor.log("CocoaPods:"+e.toString())}),i.stderr.on("data",e=>{Editor.error("CocoaPods:"+e.toString())}),i.on("error",e=>{t(e.toString())}),i.on("close",e=>{if(0!==e)return t(),void 0;r()})})}_createPodFileIfNotExist(){let t=e.join(this.options.dest,"frameworks/runtime-src/proj.ios_mac/Podfile");r.existsSync(t)||this.ensureFile(Editor.url("app://editor/core/native-packer/libs/ios/cocoapods/Podfile"),t)}_searchPBXGroup(e){if(!this.project)return;let r=this.project.getPBXObject("PBXGroup"),t=null;for(let o in r){let i=r[o];if("string"==typeof i&&i===e){t=o.split("_")[0];break}}return t}_searchTarget(e){let r=this.project.pbxNativeTargetSection(),t=null;for(let o in r){let i=r[o];if("string"==typeof i&&i===e){t=o.split("_")[0];break}}return t}_save(){r.writeFileSync(this.projectPath,this.project.writeSync())}};