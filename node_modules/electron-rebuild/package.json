{
  "_args": [
    [
      {
        "raw": "electron-rebuild@~1.6.0",
        "scope": null,
        "escapedName": "electron-rebuild",
        "name": "electron-rebuild",
        "rawSpec": "~1.6.0",
        "spec": ">=1.6.0 <1.7.0",
        "type": "range"
      },
      "/Users/nantas/fireball-x/fireball_2.1-release/dist/CocosCreator.app/Contents/Resources/app"
    ]
  ],
  "_cnpm_publish_time": 1515653772390,
  "_from": "electron-rebuild@~1.6.0",
  "_hasShrinkwrap": false,
  "_id": "electron-rebuild@1.6.1",
  "_location": "/electron-rebuild",
  "_nodeVersion": "6.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/electron-rebuild-1.6.1.tgz_1515653772235_0.818278667749837"
  },
  "_npmUser": {
    "name": "marshallofsound",
    "email": "samuel.r.attard@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {
    "camelcase": "3.0.0",
    "cliui": "3.2.0",
    "decamelize": "1.2.0",
    "get-caller-file": "1.0.3",
    "os-locale": "1.4.0",
    "read-pkg-up": "1.0.1",
    "require-directory": "2.1.1",
    "require-main-filename": "1.0.1",
    "set-blocking": "2.0.0",
    "string-width": "1.0.2",
    "which-module": "1.0.0",
    "y18n": "3.2.1",
    "yargs-parser": "5.0.0"
  },
  "_requested": {
    "raw": "electron-rebuild@~1.6.0",
    "scope": null,
    "escapedName": "electron-rebuild",
    "name": "electron-rebuild",
    "rawSpec": "~1.6.0",
    "spec": ">=1.6.0 <1.7.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "http://registry.npm.taobao.org/electron-rebuild/download/electron-rebuild-1.6.1.tgz",
  "_shasum": "3c7ab64db31e5e78ef76fedd7a53aec087b723c5",
  "_shrinkwrap": null,
  "_spec": "electron-rebuild@~1.6.0",
  "_where": "/Users/nantas/fireball-x/fireball_2.1-release/dist/CocosCreator.app/Contents/Resources/app",
  "author": {
    "name": "Paul Betts",
    "email": "paul@paulbetts.org"
  },
  "bin": {
    "electron-rebuild": "lib/src/cli.js"
  },
  "bugs": {
    "url": "https://github.com/electron/electron-rebuild/issues"
  },
  "dependencies": {
    "colors": "^1.1.2",
    "debug": "^2.6.3",
    "detect-libc": "^1.0.3",
    "fs-extra": "^3.0.1",
    "node-abi": "^2.0.0",
    "node-gyp": "^3.6.0",
    "ora": "^1.2.0",
    "rimraf": "^2.6.1",
    "spawn-rx": "^2.0.10",
    "yargs": "^7.0.2"
  },
  "description": "Electron supporting package to rebuild native node modules against the currently installed electron",
  "devDependencies": {
    "@types/chai": "^3.4.35",
    "@types/chai-as-promised": "0.0.30",
    "@types/colors": "^1.1.1",
    "@types/debug": "0.0.29",
    "@types/fs-extra": "^3.0.3",
    "@types/mocha": "^2.2.40",
    "@types/node": "^7.0.12",
    "@types/ora": "^0.3.31",
    "@types/rimraf": "0.0.28",
    "@types/yargs": "^6.6.0",
    "chai": "^3.5.0",
    "chai-as-promised": "^6.0.0",
    "electron": "^1.4.13",
    "mocha": "^3.2.0",
    "ts-node": "^3.0.2",
    "tslint": "^4.5.1",
    "typescript": "^2.2.2"
  },
  "directories": {},
  "dist": {
    "shasum": "3c7ab64db31e5e78ef76fedd7a53aec087b723c5",
    "size": 28101,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/electron-rebuild/download/electron-rebuild-1.6.1.tgz"
  },
  "engines": {
    "node": ">=6.0.0"
  },
  "gitHead": "7965c9f3a55bbb78b7c65bf66a65693039ca4394",
  "homepage": "https://github.com/electron/electron-rebuild",
  "keywords": [
    "electron"
  ],
  "license": "MIT",
  "main": "lib/src/main.js",
  "maintainers": [
    {
      "name": "electron",
      "email": "electron@github.com"
    },
    {
      "name": "jlord",
      "email": "to.jlord@gmail.com"
    },
    {
      "name": "kevinsawicki",
      "email": "kevinsawicki@gmail.com"
    },
    {
      "name": "marshallofsound",
      "email": "samuel.r.attard@gmail.com"
    },
    {
      "name": "paulcbetts",
      "email": "paul@paulbetts.org"
    },
    {
      "name": "zcbenz",
      "email": "zcbenz@gmail.com"
    },
    {
      "name": "zeke",
      "email": "zeke@sikelianos.com"
    }
  ],
  "name": "electron-rebuild",
  "optionalDependencies": {},
  "publish_time": 1515653772390,
  "readme": "## Electron Rebuild\n\nThis executable rebuilds native Node.js modules against the version of Node.js\nthat your Electron project is using. This allows you to use native Node.js\nmodules in Electron apps without your system version of Node.js matching exactly\n(which is often not the case, and sometimes not even possible).\n\n### How does it work?\n\nInstall the package with `--save-dev`:\n\n```sh\nnpm install --save-dev electron-rebuild\n```\n\nThen, whenever you install a new npm package, rerun electron-rebuild:\n\n```sh\n$(npm bin)/electron-rebuild\n```\n\nOr if you're on Windows:\n\n```sh\n.\\node_modules\\.bin\\electron-rebuild.cmd\n```\nIf you have a good node-gyp config but you see an error about a missing element on Windows like `Could not load the Visual C++ component \"VCBuild.exe\"`, try to launch electron-rebuild in an npm script:\n\n```json\n\"scripts\": {\n  \"rebuild\": \"electron-rebuild -f -w yourmodule\"\n}\n```\n\nand then\n\n```sh\nnpm run rebuild\n```\n\n### CLI Arguments\n\n```\nUsage: electron-rebuild --version [version] --module-dir [path]\n\nOptions:\n  -h, --help                   Show help                               [boolean]\n  -v, --version                The version of Electron to build against\n  -f, --force                  Force rebuilding modules, even if we would skip\n                               it otherwise\n  -a, --arch                   Override the target architecture to something\n                               other than your system's\n  -m, --module-dir             The path to the app directory to rebuild\n  -w, --which-module           A specific module to build, or comma separated\n                               list of modules\n  -e, --electron-prebuilt-dir  The path to electron-prebuilt\n  -d, --dist-url               Custom header tarball URL\n  -t, --types                  The types of dependencies to rebuild.  Comma\n                               seperated list of \"prod\", \"dev\" and \"optional\".\n                               Default is \"prod,optional\"\n  -p, --parallel               Rebuild in parallel, this is enabled by default\n                               on macOS and Linux\n  -s, --sequential             Rebuild modules sequentially, this is enabled by\n                               default on Windows\n  -o, --only                   Only build specified module, or comma separated\n                               list of modules. All others are ignored.\n  -b, --debug                  Build debug version of modules\n\nCopyright 2016\n```\n\n### How can I use this with [Electron Forge](https://github.com/electron-userland/electron-forge)?\n\nThis package is automatically used with Electron Forge when packaging an Electron app.\n\n### How can I integrate this into [Electron Packager](https://github.com/electron-userland/electron-packager)?\n\nelectron-rebuild provides a function compatible with the [`afterCopy` hook](https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#aftercopy)\nfor Electron Packager. For example:\n\n```javascript\nimport packager from 'electron-packager';\nimport rebuild from 'electron-rebuild';\n\npackager({\n  // … other options\n  afterCopy: [(buildPath, electronVersion, platform, arch, callback) => {\n    rebuild({ buildPath, electronVersion, arch })\n      .then(() => callback())\n      .catch((error) => callback(error));\n  }],\n  // … other options\n});\n```\n\n### How can I integrate this into Grunt / Gulp / Whatever?\n\nelectron-rebuild is also a library that you can just require into your app or\nbuild process. It has a very simple API:\n\n```javascript\nimport rebuild from 'electron-rebuild';\n\n// Public: Rebuilds a node_modules directory with the given Electron version.\n//\n// options: Object with the following properties\n//     buildPath - An absolute path to your app's directory.  (The directory that contains your node_modules)\n//     electronVersion - The version of Electron to rebuild for\n//     arch (optional) - Default: process.arch - The arch to rebuild for\n//     extraModules (optional) - Default: [] - An array of modules to rebuild as well as the detected modules\n//     onlyModules (optional) - Default: null - An array of modules to rebuild, ONLY these module names will be rebuilt.\n//                                              The \"types\" property will be ignored if this option is set.\n//     force (optional) - Default: false - Force a rebuild of modules regardless of their current build state\n//     headerURL (optional) - Default: atom.io/download/electron - The URL to download Electron header files from\n//     types (optional) - Default: ['prod', 'optional'] - The types of modules to rebuild\n//     mode (optional) - The rebuild mode, either 'sequential' or 'parallel' - Default varies per platform (probably shouldn't mess with this one)\n\n// Returns a Promise indicating whether the operation succeeded or not\n```\n\nA full build process might look something like:\n\n```javascript\nlet childProcess = require('child_process');\nlet pathToElectron = require('electron-prebuilt');\n\n  rebuild({\n    buildPath: __dirname,\n    electronVersion: '1.4.12'\n  })\n    .then(() => console.info('Rebuild Successful'))\n    .catch((e) => {\n      console.error(\"Building modules didn't work!\");\n      console.error(e);\n    });\n```\n\n### Alternatives\n\n- [require-rebuild](https://github.com/juliangruber/require-rebuild) patches `require()` to rebuild native node modules on the fly\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/electron/electron-rebuild.git"
  },
  "scripts": {
    "compile": "tsc",
    "lint": "tslint \"src/**/*.ts\" \"test/**/*.ts\"",
    "prepublish": "npm run compile",
    "test": "mocha --compilers ts:ts-node/register ./test/*.ts",
    "watch": "tsc -w"
  },
  "typings": "lib/src/main.d.ts",
  "version": "1.6.1"
}
