{
  "_args": [
    [
      {
        "raw": "svg.js@2.2.5",
        "scope": null,
        "escapedName": "svg.js",
        "name": "svg.js",
        "rawSpec": "2.2.5",
        "spec": "2.2.5",
        "type": "version"
      },
      "/Users/nantas/fireball-x/fireball_2.1-release/dist/CocosCreator.app/Contents/Resources/app"
    ]
  ],
  "_cnpm_publish_time": 1451391505072,
  "_from": "svg.js@2.2.5",
  "_hasShrinkwrap": false,
  "_id": "svg.js@2.2.5",
  "_location": "/svg.js",
  "_nodeVersion": "0.12.4",
  "_npmUser": {
    "name": "fuzzyma",
    "email": "ulima.ums@googlemail.com"
  },
  "_npmVersion": "2.10.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "svg.js@2.2.5",
    "scope": null,
    "escapedName": "svg.js",
    "name": "svg.js",
    "rawSpec": "2.2.5",
    "spec": "2.2.5",
    "type": "version"
  },
  "_requiredBy": [
    "/",
    "/svg.filter.js"
  ],
  "_resolved": "http://registry.npm.taobao.org/svg.js/download/svg.js-2.2.5.tgz",
  "_shasum": "de333feaf9e51a70d9c7b55118f4884114aa687a",
  "_shrinkwrap": null,
  "_spec": "svg.js@2.2.5",
  "_where": "/Users/nantas/fireball-x/fireball_2.1-release/dist/CocosCreator.app/Contents/Resources/app",
  "author": {
    "name": "Wout Fierens",
    "email": "wout@impinc.co.uk"
  },
  "bugs": {
    "url": "https://github.com/wout/svg.js/issues"
  },
  "dependencies": {},
  "description": "A lightweight library for manipulating and animating SVG.",
  "devDependencies": {
    "del": "^1.2.0",
    "gulp": "^3.8.6",
    "gulp-chmod": "^1.2.0",
    "gulp-concat": "^2.3.3",
    "gulp-header": "^1.0.5",
    "gulp-jasmine": "^0.3.0",
    "gulp-rename": "^1.2.0",
    "gulp-size": "^0.4.0",
    "gulp-trimlines": "^1.0.0",
    "gulp-uglify": "^0.3.1",
    "gulp-wrap": "^0.11.0",
    "request": "^2.37.0"
  },
  "directories": {},
  "dist": {
    "shasum": "de333feaf9e51a70d9c7b55118f4884114aa687a",
    "size": 167113,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/svg.js/download/svg.js-2.2.5.tgz"
  },
  "gitHead": "5ea599b880395380ec80167ebbfb54046d517cc5",
  "github": "https://github.com/wout/svg.js",
  "homepage": "http://www.svgjs.com",
  "jam": {
    "include": [
      "dist/svg.js",
      "README.md",
      "LICENSE.txt"
    ]
  },
  "keywords": [
    "svg",
    "vector",
    "graphics",
    "animation"
  ],
  "license": "MIT",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "main": "dist/svg.js",
  "maintainers": [
    {
      "name": "Wout Fierens",
      "email": "wout@svgjs.com",
      "url": "http://svgjs.com"
    },
    {
      "name": "Alex Ewerlöf",
      "email": "alex@userpixel.com",
      "url": "http://www.ewerlof.name"
    },
    {
      "name": "Ulrich-Matthias Schäfer",
      "email": "ulima.ums@googlemail.com"
    }
  ],
  "name": "svg.js",
  "optionalDependencies": {},
  "publish_time": 1451391505072,
  "readme": "# SVG.js\r\n\r\nA lightweight library for manipulating and animating SVG.\r\n\r\nSvg.js has no dependencies and aims to be as small as possible.\r\n\r\nSvg.js is licensed under the terms of the MIT License.\r\n\r\nSee [svgjs.com](http://svgjs.com) for an introduction, [documentation](http://documentup.com/wout/SVG.js) and [some action](http://svgjs.com/test).\r\n\r\n## Usage\r\n\r\n### Create an SVG document\r\n\r\nUse the `SVG()` function to create an SVG document within a given html element:\r\n\r\n```javascript\r\nvar draw = SVG('drawing').size(300, 300)\r\nvar rect = draw.rect(100, 100).attr({ fill: '#f06' })\r\n```\r\nThe first argument can either be an id of the element or the selected element itself.\r\nThis will generate the following output:\r\n\r\n```html\r\n<div id=\"drawing\">\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"300\" height=\"300\">\r\n    <rect width=\"100\" height=\"100\" fill=\"#f06\"></rect>\r\n  </svg>\r\n</div>\r\n```\r\n\r\nBy default the svg drawing follows the dimensions of its parent, in this case `#drawing`:\r\n\r\n```javascript\r\nvar draw = SVG('drawing').size('100%', '100%')\r\n```\r\n\r\n### Checking for SVG support\r\n\r\nBy default this library assumes the client's browser supports SVG. You can test support as follows:\r\n\r\n```javascript\r\nif (SVG.supported) {\r\n  var draw = SVG('drawing')\r\n  var rect = draw.rect(100, 100)\r\n} else {\r\n  alert('SVG not supported')\r\n}\r\n```\r\n\r\n\r\n### SVG document\r\nSvg.js also works outside of the HTML DOM, inside an SVG document for example:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<svg id=\"drawing\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" >\r\n  <script type=\"text/javascript\" xlink:href=\"svg.min.js\"></script>\r\n  <script type=\"text/javascript\">\r\n    <![CDATA[\r\n      var draw = SVG('drawing')\r\n      draw.rect(100,100).animate().fill('#f03').move(100,100)\r\n    ]]>\r\n  </script>\r\n</svg>\r\n```\r\n\r\n### Sub-pixel offset fix\r\nCall the `spof()` method to fix sub-pixel offset:\r\n\r\n```javascript\r\nvar draw = SVG('drawing').spof()\r\n```\r\n\r\nTo enable automatic sub-pixel offset correction when the window is resized:\r\n\r\n```javascript\r\nSVG.on(window, 'resize', function() { draw.spof() })\r\n```\r\n\r\n## Parent elements\r\n\r\n### Main svg document\r\nThe main SVG.js initializer function creates a root svg node in the given element and returns an instance of `SVG.Doc`:\r\n\r\n```javascript\r\nvar draw = SVG('drawing')\r\n```\r\n\r\n__`returns`: `SVG.Doc`__\r\n\r\n_Javascript inheritance stack: `SVG.Doc` < `SVG.Container` < `SVG.Parent`_\r\n\r\n### Nested svg\r\nWith this feature you can nest svg documents within each other. Nested svg documents have exactly the same features as the main, top-level svg document:\r\n\r\n```javascript\r\nvar nested = draw.nested()\r\n\r\nvar rect = nested.rect(200, 200)\r\n```\r\n\r\n__`returns`: `SVG.Nested`__\r\n\r\n_Javascript inheritance stack: `SVG.Nested` < `SVG.Container` < `SVG.Parent`_\r\n\r\n### Groups\r\nGrouping elements is useful if you want to transform a set of elements as if it were one. All element within a group maintain their position relative to the group they belong to. A group has all the same element methods as the root svg document:\r\n\r\n```javascript\r\nvar group = draw.group()\r\ngroup.path('M10,20L30,40')\r\n```\r\n\r\nExisting elements from the svg document can also be added to a group:\r\n\r\n```javascript\r\ngroup.add(rect)\r\n```\r\n\r\n__Note:__ Groups do not have a geometry of their own, it's inherited from their content. Therefore groups do not listen to `x`, `y`, `width` and `height` attributes. If that is what you are looking for, use a `nested()` svg instead.\r\n\r\n__`returns`: `SVG.G`__\r\n\r\n_Javascript inheritance stack: `SVG.G` < `SVG.Container` < `SVG.Parent`_\r\n\r\n### Hyperlink\r\nA hyperlink or `<a>` tag creates a container that enables a link on all children:\r\n\r\n```javascript\r\nvar link = draw.link('http://svgjs.com')\r\nvar rect = link.rect(100, 100)\r\n```\r\n\r\nThe link url can be updated with the `to()` method:\r\n\r\n```javascript\r\nlink.to('http://apple.com')\r\n```\r\n\r\nFurthermore, the link element has a `show()` method to create the `xlink:show` attribute:\r\n\r\n```javascript\r\nlink.show('replace')\r\n```\r\n\r\nAnd the `target()` method to create the `target` attribute:\r\n\r\n```javascript\r\nlink.target('_blank')\r\n```\r\n\r\nElements can also be linked the other way around with the `linkTo()` method:\r\n\r\n```javascript\r\nrect.linkTo('http://svgjs.com')\r\n```\r\n\r\nAlternatively a block can be passed instead of a url for more options on the link element:\r\n\r\n```javascript\r\nrect.linkTo(function(link) {\r\n  link.to('http://svgjs.com').target('_blank')\r\n})\r\n```\r\n\r\n__`returns`: `SVG.A`__\r\n\r\n_Javascript inheritance stack: `SVG.A` < `SVG.Container` < `SVG.Parent`_\r\n\r\n### Defs\r\nThe `<defs>` element is a container element for referenced elements. Elements that are descendants of a ‘defs’ are not rendered directly. The `<defs>` node lives in the main `<svg>` document and can be accessed with the `defs()` method:\r\n\r\n```javascript\r\nvar defs = draw.defs()\r\n```\r\n\r\nThe defs are also available on any other element through the `doc()` method:\r\n\r\n```javascript\r\nvar defs = rect.doc().defs()\r\n```\r\n\r\nThe defs node works exactly the same as groups.\r\n\r\n__`returns`: `SVG.Defs`__\r\n\r\n_Javascript inheritance stack: `SVG.Defs` < `SVG.Container` < `SVG.Parent`_\r\n\r\n## Rect\r\nRects have two arguments, their `width` and `height`:\r\n\r\n```javascript\r\nvar rect = draw.rect(100, 100)\r\n```\r\n\r\n__`returns`: `SVG.Rect`__\r\n\r\n_Javascript inheritance stack: `SVG.Rect` < `SVG.Shape` < `SVG.Element`_\r\n\r\n### radius()\r\nRects can also have rounded corners:\r\n\r\n```javascript\r\nrect.radius(10)\r\n```\r\n\r\nThis will set the `rx` and `ry` attributes to `10`. To set `rx` and `ry` individually:\r\n\r\n```javascript\r\nrect.radius(10, 20)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n## Circle\r\nThe only argument necessary for a circle is the diameter:\r\n\r\n```javascript\r\nvar circle = draw.circle(100)\r\n```\r\n\r\n__`returns`: `SVG.Circle`__\r\n\r\n_Javascript inheritance stack: `SVG.Circle` < `SVG.Shape` < `SVG.Element`_\r\n\r\n### radius()\r\nCircles can also be redefined by their radius:\r\n\r\n```javascript\r\nrect.radius(75)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n## Ellipse\r\nEllipses, like rects, have two arguments, their `width` and `height`:\r\n\r\n```javascript\r\nvar ellipse = draw.ellipse(200, 100)\r\n```\r\n\r\n__`returns`: `SVG.Ellipse`__\r\n\r\n_Javascript inheritance stack: `SVG.Ellipse` < `SVG.Shape` < `SVG.Element`_\r\n\r\n### radius()\r\nEllipses can also be redefined by their radii:\r\n\r\n```javascript\r\nrect.radius(75, 50)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n## Line\r\nCreate a line from point A to point B:\r\n\r\n```javascript\r\nvar line = draw.line(0, 0, 100, 150).stroke({ width: 1 })\r\n```\r\n\r\nCreating a line element can be done in four ways. Look at the `plot()` method to see all the possiblilities.\r\n\r\n__`returns`: `SVG.Line`__\r\n\r\n_Javascript inheritance stack: `SVG.Line` < `SVG.Shape` < `SVG.Element`_\r\n\r\n### plot()\r\nUpdating a line is done with the `plot()` method:\r\n\r\n```javascript\r\nline.plot(50, 30, 100, 150)\r\n```\r\n\r\nAlternatively it also accepts a point string:\r\n\r\n```javascript\r\nline.plot('0,0 100,150')\r\n```\r\n\r\nOr a point array:\r\n\r\n```javascript\r\nline.plot([[0, 0], [100, 150]])\r\n```\r\n\r\nOr an instance of `SVG.PointArray`:\r\n\r\n```javascript\r\nvar array = new SVG.PointArray([[0, 0], [100, 150]])\r\nline.plot(array)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### array()\r\nReferences the `SVG.PointArray` instance. This method is rather intended for internal use:\r\n\r\n```javascript\r\npolyline.array()\r\n```\r\n\r\n__`returns`: `SVG.PointArray`__\r\n\r\n\r\n## Polyline\r\nThe polyline element defines a set of connected straight line segments. Typically, polyline elements define open shapes:\r\n\r\n```javascript\r\n// polyline('x,y x,y x,y')\r\nvar polyline = draw.polyline('0,0 100,50 50,100').fill('none').stroke({ width: 1 })\r\n```\r\n\r\nPolyline strings consist of a list of points separated by spaces: `x,y x,y x,y`.\r\n\r\nAs an alternative an array of points will work as well:\r\n\r\n```javascript\r\n// polyline([[x,y], [x,y], [x,y]])\r\nvar polyline = draw.polyline([[0,0], [100,50], [50,100]]).fill('none').stroke({ width: 1 })\r\n```\r\n\r\n__`returns`: `SVG.Polyline`__\r\n\r\n_Javascript inheritance stack: `SVG.Polyline` < `SVG.Shape` < `SVG.Element`_\r\n\r\n### plot()\r\nPolylines can be updated using the `plot()` method:\r\n\r\n```javascript\r\npolyline.plot([[0,0], [100,50], [50,100], [150,50], [200,50]])\r\n```\r\n\r\nThe `plot()` method can also be animated:\r\n\r\n```javascript\r\npolyline.animate(3000).plot([[0,0], [100,50], [50,100], [150,50], [200,50], [250,100], [300,50], [350,50]])\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### array()\r\nReferences the `SVG.PointArray` instance. This method is rather intended for internal use:\r\n\r\n```javascript\r\npolyline.array()\r\n```\r\n\r\n__`returns`: `SVG.PointArray`__\r\n\r\n## Polygon\r\nThe polygon element, unlike the polyline element, defines a closed shape consisting of a set of connected straight line segments:\r\n\r\n```javascript\r\n// polygon('x,y x,y x,y')\r\nvar polygon = draw.polygon('0,0 100,50 50,100').fill('none').stroke({ width: 1 })\r\n```\r\n\r\nPolygon strings are exactly the same as polyline strings. There is no need to close the shape as the first and last point will be connected automatically.\r\n\r\n__`returns`: `SVG.Polygon`__\r\n\r\n_Javascript inheritance stack: `SVG.Polygon` < `SVG.Shape` < `SVG.Element`_\r\n\r\n### plot()\r\nLike polylines, polygons can be updated using the `plot()` method:\r\n\r\n```javascript\r\npolygon.plot([[0,0], [100,50], [50,100], [150,50], [200,50]])\r\n```\r\n\r\nThe `plot()` method can also be animated:\r\n\r\n```javascript\r\npolygon.animate(3000).plot([[0,0], [100,50], [50,100], [150,50], [200,50], [250,100], [300,50], [350,50]])\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### array()\r\nReferences the `SVG.PointArray` instance. This method is rather intended for internal use:\r\n\r\n```javascript\r\npolygon.array()\r\n```\r\n\r\n__`returns`: `SVG.PointArray`__\r\n\r\n## Path\r\nThe path string is similar to the polygon string but much more complex in order to support curves:\r\n\r\n```javascript\r\ndraw.path('M 100 200 C 200 100 300  0 400 100 C 500 200 600 300 700 200 C 800 100 900 100 900 100')\r\n```\r\n\r\n__`returns`: `SVG.Path`__\r\n\r\n_Javascript inheritance stack: `SVG.Path` < `SVG.Shape` < `SVG.Element`_\r\n\r\nFor more details on path data strings, please refer to the SVG documentation:\r\nhttp://www.w3.org/TR/SVG/paths.html#PathData\r\n\r\n### plot()\r\nPaths can be updated using the `plot()` method:\r\n\r\n```javascript\r\npath.plot('M100,200L300,400')\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### array()\r\nReferences the `SVG.PathArray` instance. This method is rather intended for internal use:\r\n\r\n```javascript\r\npath.array()\r\n```\r\n\r\n__`returns`: `SVG.PathArray`__\r\n\r\n## Image\r\nCreating images is as you might expect:\r\n\r\n```javascript\r\nvar image = draw.image('/path/to/image.jpg')\r\n```\r\n\r\nIf you know the size of the image, those parameters can be passed as the second and third arguments:\r\n\r\n```javascript\r\nvar image = draw.image('/path/to/image.jpg', 200, 300)\r\n```\r\n\r\n__`returns`: `SVG.Image`__\r\n\r\n_Javascript inheritance stack: `SVG.Image` < `SVG.Shape` < `SVG.Element`_\r\n\r\n### load()\r\nLoading another image can be done with the `load()` method:\r\n\r\n```javascript\r\nimage.load('/path/to/another/image.jpg')\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### loaded()\r\nIf you don't know the size of the image, obviously you will have to wait for the image to be `loaded`:\r\n\r\n```javascript\r\nvar image = draw.image('/path/to/image.jpg').loaded(function(loader) {\r\n  this.size(loader.width, loader.height)\r\n})\r\n```\r\n\r\nThe returned `loader` object as first the argument of the loaded method contains four values:\r\n- `width`\r\n- `height`\r\n- `ratio` (width / height)\r\n- `url`\r\n\r\n__`returns`: `itself`__\r\n\r\n\r\n## Text\r\nUnlike html, text in svg is much harder to tame. There is no way to create flowing text, so newlines should be entered manually. In SVG.js there are two ways to create text elements.\r\n\r\nThe first and easiest method is to provide a string of text, split by newlines:\r\n\r\n```javascript\r\nvar text = draw.text(\"Lorem ipsum dolor sit amet consectetur.\\nCras sodales imperdiet auctor.\")\r\n```\r\n\r\nThis will automatically create a block of text and insert newlines where necessary.\r\n\r\nThe second method will give you much more control but requires a bit more code:\r\n\r\n```javascript\r\nvar text = draw.text(function(add) {\r\n  add.tspan('Lorem ipsum dolor sit amet ').newLine()\r\n  add.tspan('consectetur').fill('#f06')\r\n  add.tspan('.')\r\n  add.tspan('Cras sodales imperdiet auctor.').newLine().dx(20)\r\n  add.tspan('Nunc ultrices lectus at erat').newLine()\r\n  add.tspan('dictum pharetra elementum ante').newLine()\r\n})\r\n```\r\n\r\nIf you want to go the other way and don't want to add tspans at all, just one line of text, you can use the `plain()` method instead:\r\n\r\n```javascript\r\nvar text = draw.plain('Lorem ipsum dolor sit amet consectetur.')\r\n```\r\n\r\nThis is a shortcut to the `plain` method on the `SVG.Text` instance which doesn't render newlines at all.\r\n\r\n_Javascript inheritance stack: `SVG.Text` < `SVG.Shape` < `SVG.Element`_\r\n\r\n__`returns`: `SVG.Text`__\r\n\r\n### text()\r\nChanging text afterwards is also possible with the `text()` method:\r\n\r\n```javascript\r\ntext.text('Brilliant!')\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\nTo get the raw text content:\r\n\r\n```javascript\r\ntext.text()\r\n```\r\n\r\n__`returns`: `string`__\r\n\r\n### tspan()\r\nJust adding one tspan is also possible:\r\n\r\n```javascript\r\ntext.tspan(' on a train...').fill('#f06')\r\n```\r\n\r\n__`returns`: `SVG.Tspan`__\r\n\r\n### plain()\r\nIf the content of the element doesn't need any stying or multiple lines, it might be sufficient to just add some plain text:\r\n\r\n```javascript\r\ntext.plain('I do not have any expectations.')\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### font()\r\nThe sugar.js module provides some syntax sugar specifically for this element type:\r\n\r\n```javascript\r\ntext.font({\r\n  family:   'Helvetica'\r\n, size:     144\r\n, anchor:   'middle'\r\n, leading:  '1.5em'\r\n})\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### leading()\r\nAs opposed to html, where leading is defined by `line-height`, svg does not have a natural leading equivalent. In svg, lines are not defined naturally. They are defined by `<tspan>` nodes with a `dy` attribute defining the line height and a `x` value resetting the line to the `x` position of the parent text element. But you can also have many nodes in one line defining a different `y`, `dy`, `x` or even `dx` value. This gives us a lot of freedom, but also a lot more responsibility. We have to decide when a new line is defined, where it starts, what its offset is and what it's height is. The `leading()` method in SVG.js tries to ease the pain by giving you behaviour that is much closer to html. In combination with newline separated text, it works just like html:\r\n\r\n```javascript\r\nvar text = draw.text(\"Lorem ipsum dolor sit amet consectetur.\\nCras sodales imperdiet auctor.\")\r\ntext.leading(1.3)\r\n```\r\n\r\nThis will render a text element with a tspan element for each line, with a `dy` value of `130%` of the font size.\r\n\r\nNote that the `leading()` method assumes that every first level tspan in a text node represents a new line. Using `leading()` on text elements containing multiple tspans in one line (e.g. without a wrapping tspan defining a new line) will render scrambeled. So it is advisable to use this method with care, preferably only when throwing newline separated text at the text element or calling the `newLine()` method on every first level tspan added in the block passed as argument to the text element.\r\n\r\n__`returns`: `itself`__\r\n\r\n### build()\r\nThe `build()` can be used to enable / disable build mode. With build mode disabled, the `plain()` and `tspan()` methods will first call the `clear()` bethod before adding the new content. So when build mode is enabled, `plain()` and `tspan()` will append the new content to the existing content. When passing a block to the `text()` method, build mode is toggled automatically before and after the block is called. But in some cases it might be useful to be able to toggle it manually:\r\n\r\n\r\n```javascript\r\nvar text = draw.text('This is just the start, ')\r\n\r\ntext.build(true)  // enables build mode\r\n\r\nvar tspan = text.tspan('something pink in the middle ').fill('#00ff97')\r\ntext.plain('and again boring at the end.')\r\n\r\ntext.build(false) // disables build mode\r\n\r\ntspan.animate('2s').fill('#f06')\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### rebuild()\r\nThis is an internal callback that probably never needs to be called manually. Basically it rebuilds the text element whenerver `font-size` and `x` attributes or the `leading()` of the text element are modified. This method also acts a setter to enable or disable rebuilding:\r\n\r\n```javascript\r\ntext.rebuild(false) //-> disables rebuilding\r\ntext.rebuild(true)  //-> enables rebuilding and instantaneously rebuilds the text element\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### clear()\r\nClear all the contents of the called text element:\r\n\r\n```javascript\r\ntext.clear()\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### length()\r\nGets the total computed text length of all tspans together:\r\n\r\n```javascript\r\ntext.length()\r\n```\r\n\r\n__`returns`: `number`__\r\n\r\n\r\n### lines()\r\nAll first level tspans can be referenced with the `lines()` method:\r\n\r\n```javascript\r\ntext.lines()\r\n```\r\n\r\nThis will return an intance of `SVG.Set` including all `tspan` elements.\r\n\r\n__`returns`: `SVG.Set`__\r\n\r\n### events\r\nThe text element has one event. It is fired every time the `rebuild()` method is called:\r\n\r\n```javascript\r\ntext.on('rebuild', function() {\r\n  // whatever you need to do after rebuilding\r\n})\r\n```\r\n\r\n## Tspan\r\nThe tspan elements are only available inside text elements or inside other tspan elements. In SVG.js they have a class of their own:\r\n\r\n_Javascript inheritance stack: `SVG.Tspan` < `SVG.Shape` < `SVG.Element`_\r\n\r\n### text()\r\nUpdate the content of the tspan. This can be done by either passing a string:\r\n\r\n\r\n```javascript\r\ntspan.text('Just a string.')\r\n```\r\n\r\nWhich will basicly call the `plain()` method.\r\n\r\nOr by passing a block to add more specific content inside the called tspan:\r\n\r\n```javascript\r\ntspan.text(function(add) {\r\n  add.plain('Just plain text.')\r\n  add.tspan('Fancy text wrapped in a tspan.').fill('#f06')\r\n  add.tspan(function(addMore) {\r\n    addMore.tspan('And you can doo deeper and deeper...')\r\n  })\r\n})\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### tspan()\r\nAdd a nested tspan:\r\n\r\n```javascript\r\ntspan.tspan('I am a child of my parent').fill('#f06')\r\n```\r\n\r\n__`returns`: `SVG.Tspan`__\r\n\r\n### plain()\r\nJust adds some plain text:\r\n\r\n```javascript\r\ntspan.plain('I do not have any expectations.')\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### dx()\r\nDefine the dynamic `x` value of the element, much like a html element with `position:relative` and `left` defined:\r\n\r\n```javascript\r\ntspan.dx(30)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### dy()\r\nDefine the dynamic `y` value of the element, much like a html element with `position:relative` and `top` defined:\r\n\r\n```javascript\r\ntspan.dy(30)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### newLine()\r\nThe `newLine()` is a convenience method for adding a new line with a `dy` attribute using the current \"leading\":\r\n\r\n```javascript\r\nvar text = draw.text(function(add) {\r\n  add.tspan('Lorem ipsum dolor sit amet ').newLine()\r\n  add.tspan('consectetur').fill('#f06')\r\n  add.tspan('.')\r\n  add.tspan('Cras sodales imperdiet auctor.').newLine().dx(20)\r\n  add.tspan('Nunc ultrices lectus at erat').newLine()\r\n  add.tspan('dictum pharetra elementum ante').newLine()\r\n})\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### clear()\r\nClear all the contents of the called tspan element:\r\n\r\n```javascript\r\ntspan.clear()\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### length()\r\nGets the total computed text length:\r\n\r\n```javascript\r\ntspan.length()\r\n```\r\n\r\n__`returns`: `number`__\r\n\r\n## TextPath\r\nA nice feature in svg is the ability to run text along a path:\r\n\r\n```javascript\r\nvar text = draw.text(function(add) {\r\n  add.tspan('We go ')\r\n  add.tspan('up').fill('#f09').dy(-40)\r\n  add.tspan(', then we go down, then up again').dy(40)\r\n})\r\ntext\r\n  .path('M 100 200 C 200 100 300 0 400 100 C 500 200 600 300 700 200 C 800 100 900 100 900 100')\r\n  .font({ size: 42.5, family: 'Verdana' })\r\n```\r\n\r\nWhen calling the `path()` method on a text element, the text element is mutated into an intermediate between a text and a path element. From that point on the text element will also feature a `plot()` method to update the path:\r\n\r\n```javascript\r\ntext.plot('M 300 500 C 200 100 300 0 400 100 C 500 200 600 300 700 200 C 800 100 900 100 900 100')\r\n```\r\n\r\nAttributes specific to the `<textPath>` element can be applied to the textPath instance itself:\r\n\r\n```javascript\r\ntext.textPath().attr('startOffset', 0.5)\r\n```\r\n\r\nAnd they can be animated as well of course:\r\n\r\n```javascript\r\ntext.textPath().animate(3000).attr('startOffset', 0.8)\r\n```\r\n\r\n__`returns`: `SVG.TextPath`__\r\n\r\n_Javascript inheritance stack: `SVG.TextPath` < `SVG.Element`_\r\n\r\n### textPath()\r\nReferencing the textPath node directly:\r\n\r\n```javascript\r\nvar textPath = text.textPath()\r\n```\r\n\r\n__`returns`: `SVG.TextPath`__\r\n\r\n### track()\r\nReferencing the linked path element directly:\r\n\r\n```javascript\r\nvar path = text.track()\r\n```\r\n\r\n__`returns`: `SVG.Path`__\r\n\r\n## Use\r\nThe use element simply emulates another existing element. Any changes on the master element will be reflected on all the `use` instances. The usage of `use()` is very straightforward:\r\n\r\n```javascript\r\nvar rect = draw.rect(100, 100).fill('#f09')\r\nvar use  = draw.use(rect).move(200, 200)\r\n```\r\n\r\nIn the case of the example above two rects will appear on the svg drawing, the original and the `use` instance. In some cases you might want to hide the original element. the best way to do this is to create the original element in the defs node:\r\n\r\n```javascript\r\nvar rect = draw.defs().rect(100, 100).fill('#f09')\r\nvar use  = draw.use(rect).move(200, 200)\r\n```\r\n\r\nIn this way the rect element acts as a library element. You can edit it but it won't be rendered.\r\n\r\nAnother way is to point an external SVG file, just specified the element `id` and path to file.\r\n\r\n```javascript\r\nvar use  = draw.use('elementId', 'path/to/file.svg')\r\n```\r\n\r\nThis way is usefull when you have complex images already created.\r\nNote that, for external images (outside your domain) it may be necessary to load the file with XHR.\r\n\r\n__`returns`: `SVG.Use`__\r\n\r\n_Javascript inheritance stack: `SVG.Use` < `SVG.Shape` < `SVG.Element`_\r\n\r\n## Symbol\r\nNot unlike the `group` element, the `symbol` element is a container element. The only difference between symbols and groups is that symbols are not rendered. Therefore a `symbol` element is ideal in combination with the `use` element:\r\n\r\n```javascript\r\nvar symbol = draw.symbol()\r\nsymbol.rect(100, 100).fill('#f09')\r\n\r\nvar use  = draw.use(symbol).move(200, 200)\r\n```\r\n\r\n__`returns`: `SVG.Bare`__\r\n\r\n_Javascript inheritance stack: `SVG.Bare` < `SVG.Element` [with a shallow inheritance from `SVG.Parent`]_\r\n\r\n## Bare\r\nFor all SVG elements that are not described by SVG.js, the `SVG.Bare` class comes in handy. This class inherits directly from `SVG.Element` and makes it possible to add custom methods in a separate namespace without polluting the main `SVG.Element` namespace. Consider it your personal playground.\r\n\r\n### element()\r\nThe `SVG.Bare` class can be instantiated with the `element()` method on any parent element:\r\n\r\n```javascript\r\nvar element = draw.element('title')\r\n```\r\nThe string value passed as the first argument is the node name that should be generated.\r\n\r\nAdditionally any existing class name can be passed as the second argument to define from which class the element should inherit:\r\n\r\n```javascript\r\nvar element = draw.element('symbol', SVG.Parent)\r\n```\r\n\r\nThis gives you as the user a lot of power. But remember, with great power comes great responsibility.\r\n\r\n__`returns`: `SVG.Bare`__\r\n\r\n### words()\r\nThe `SVG.Bare` instance carries an additional method to add plain text:\r\n\r\n```javascript\r\nvar element = draw.element('title').words('This is a title.')\r\n//-> <title>This is a title.</title>\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n## Referencing elements\r\n\r\n### By id\r\nIf you want to get an element created by SVG.js by its id, you can use the `SVG.get()` method:\r\n\r\n```javascript\r\nvar element = SVG.get('my_element')\r\n\r\nelement.fill('#f06')\r\n```\r\n\r\n### Using CSS selectors\r\nThere are two ways to select elements using CSS selectors.\r\n\r\nThe first is to search globally. This will search in all svg elements in a document and return them in an instance of `SVG.Set`:\r\n\r\n```javascript\r\nvar elements = SVG.select('rect.my-class').fill('#f06')\r\n```\r\n\r\nThe second is to search within a parent element:\r\n\r\n```javascript\r\nvar elements = group.select('rect.my-class').fill('#f06')\r\n```\r\n\r\n### Using jQuery or Zepto\r\nAnother way is to use [jQuery](http://jquery.com/) or [Zepto](http://zeptojs.com/). Here is an example:\r\n\r\n```javascript\r\n// add elements \r\nvar draw   = SVG('drawing')\r\nvar group  = draw.group().addClass('my-group')\r\nvar rect   = group.rect(100,100).addClass('my-element')\r\nvar circle = group.circle(100).addClass('my-element').move(100, 100)\r\n\r\n// get elements in group \r\nvar elements = $('#drawing g.my-group .my-element').each(function() {\r\n  this.instance.animate().fill('#f09')\r\n})\r\n```\r\n\r\n## Circular reference\r\nEvery element instance within SVG.js has a reference to the actual `node`:\r\n\r\n### node\r\n```javascript\r\nelement.node\r\n```\r\n__`returns`: `node`__\r\n\r\n### native()\r\nThe same can be achieved with the `native()` method:\r\n```javascript\r\nelement.native()\r\n```\r\n__`returns`: `node`__\r\n\r\n\r\n### instance\r\nSimilar, the node carries a reference to the SVG.js `instance`:\r\n\r\n```javascript\r\nnode.instance\r\n```\r\n__`returns`: `element`__\r\n\r\n## Parent reference\r\nEvery element has a reference to its parent with the `parent()` method:\r\n\r\n### parent()\r\n\r\n```javascript\r\nelement.parent()\r\n```\r\n\r\n__`returns`: `element`__\r\n\r\nAlternatively a class or css selector can be passed as the first argument:\r\n\r\n```javascript\r\nvar draw   = SVG('drawing')\r\nvar nested = draw.nested().addClass('test')\r\nvar group  = nested.group()\r\nvar rect   = group.rect(100, 100)\r\n\r\nrect.parent()           //-> returns group\r\nrect.parent(SVG.Doc)    //-> returns draw\r\nrect.parent(SVG.Nested) //-> returns nested\r\nrect.parent(SVG.G)      //-> returns group\r\nrect.parent('.test')    //-> returns nested\r\n```\r\n\r\n__`returns`: `element`__\r\n\r\nEven the main svg document:\r\n\r\n```javascript\r\nvar draw = SVG('drawing')\r\n\r\ndraw.parent() //-> returns the wrappig html element with id 'drawing'\r\n```\r\n\r\n__`returns`: `HTMLNode`__\r\n\r\n\r\n### doc()\r\nFor retrieving the root svg you can use `doc()`\r\n\r\n```javascript\r\nvar draw = SVG('drawing')\r\nvar rect = draw.rect(100, 100)\r\n\r\nrect.doc() //-> returns draw\r\n```\r\n\r\n### parents()\r\nTo get all ancestors of the element filtered by type or css selector (see `parent()` method)\r\n\r\n```javascript\r\nvar group1 = draw.group().addClass('test')\r\n  , group2 = group1.group()\r\n  , rect   = group2.rect(100,100)\r\n  \r\nrect.parents()        // returns [group1, group2, draw]\r\nrect.parents('.test') // returns [group1]\r\nrect.parents(SVG.G)   // returns [group1, group2]\r\n```\r\n\r\n__`returns`: `Array`__\r\n\r\n## Child references\r\n\r\n### first()\r\nTo get the first child of a parent element:\r\n\r\n```javascript\r\ndraw.first()\r\n```\r\n__`returns`: `element`__\r\n\r\n### last()\r\nTo get the last child of a parent element:\r\n\r\n```javascript\r\ndraw.last()\r\n```\r\n__`returns`: `element`__\r\n\r\n### children()\r\nAn array of all children will can be retreives with the `children` method:\r\n\r\n```javascript\r\ndraw.children()\r\n```\r\n__`returns`: `array`__\r\n\r\n### each()\r\nThe `each()` allows you to iterate over the all children of a parent element:\r\n\r\n```javascript\r\ndraw.each(function(i, children) {\r\n  this.fill({ color: '#f06' })\r\n})\r\n```\r\n\r\nDeep traversing is also possible by passing true as the second argument:\r\n\r\n```javascript\r\n// draw.each(block, deep)\r\ndraw.each(function(i, children) {\r\n  this.fill({ color: '#f06' })\r\n}, true)\r\n```\r\n\r\nNote that `this` refers to the current child element.\r\n\r\n__`returns`: `itself`__\r\n\r\n### has()\r\nChecking the existence of an element within a parent:\r\n\r\n```javascript\r\nvar rect  = draw.rect(100, 50)\r\nvar group = draw.group()\r\n\r\ndraw.has(rect)  //-> returns true\r\ngroup.has(rect) //-> returns false\r\n```\r\n__`returns`: `boolean`__\r\n\r\n### index()\r\nReturns the index of given element and returns -1 when it is not a child:\r\n\r\n```javascript\r\nvar rect  = draw.rect(100, 50)\r\nvar group = draw.group()\r\n\r\ndraw.index(rect)  //-> returns 0\r\ngroup.index(rect) //-> returns -1\r\n```\r\n__`returns`: `number`__\r\n\r\n### get()\r\nGet an element on a given position in the children array:\r\n\r\n```javascript\r\nvar rect   = draw.rect(20, 30)\r\nvar circle = draw.circle(50)\r\n\r\ndraw.get(0) //-> returns rect\r\ndraw.get(1) //-> returns circle\r\n```\r\n__`returns`: `element`__\r\n\r\n### clear()\r\nTo remove all elements from a parent element:\r\n\r\n```javascript\r\ndraw.clear()\r\n```\r\n__`returns`: `itself`__\r\n\r\n\r\n## Import / export SVG\r\n\r\n### svg()\r\nExporting the full generated SVG, or a part of it, can be done with the `svg()` method:\r\n\r\n```javascript\r\ndraw.svg()\r\n```\r\n\r\nExporting works on all elements.\r\n\r\nImporting is done with the same method:\r\n\r\n```javascript\r\ndraw.svg('<g><rect width=\"100\" height=\"50\" fill=\"#f06\"></rect></g>')\r\n```\r\n\r\nImporting works on any element that inherits from `SVG.Parent`, which is basically every element that can contain other elements.\r\n\r\n`getter`__`returns`: `string`__\r\n\r\n`setter`__`returns`: `itself`__\r\n\r\n## Attributes and styles\r\n\r\n### attr()\r\nYou can get and set an element's attributes directly using `attr()`.\r\n\r\nGet a single attribute:\r\n```javascript\r\nrect.attr('x')\r\n```\r\n\r\nSet a single attribute:\r\n```javascript\r\nrect.attr('x', 50)\r\n```\r\n\r\nSet multiple attributes at once:\r\n```javascript\r\nrect.attr({\r\n  fill: '#f06'\r\n, 'fill-opacity': 0.5\r\n, stroke: '#000'\r\n, 'stroke-width': 10\r\n})\r\n```\r\n\r\nSet an attribute with a namespace:\r\n```javascript\r\nrect.attr('x', 50, 'http://www.w3.org/2000/svg')\r\n```\r\n\r\nExplicitly remove an attribute:\r\n```javascript\r\nrect.attr('fill', null)\r\n```\r\n\r\n`getter`__`returns`: `value`__\r\n\r\n`setter`__`returns`: `itself`__\r\n\r\n\r\n### style()\r\nWith the `style()` method the `style` attribute can be managed like attributes with `attr`:\r\n\r\n```javascript\r\nrect.style('cursor', 'pointer')\r\n```\r\n\r\nMultiple styles can be set at once using an object:\r\n\r\n```javascript\r\nrect.style({ cursor: 'pointer', fill: '#f03' })\r\n```\r\n\r\nOr a css string:\r\n\r\n```javascript\r\nrect.style('cursor:pointer;fill:#f03;')\r\n```\r\n\r\nSimilar to `attr()` the `style()` method can also act as a getter:\r\n\r\n```javascript\r\nrect.style('cursor')\r\n// => pointer\r\n```\r\n\r\nOr even a full getter:\r\n\r\n```javascript\r\nrect.style()\r\n// => 'cursor:pointer;fill:#f03;'\r\n```\r\n\r\nExplicitly deleting individual style definitions works the same as with the `attr()` method:\r\n\r\n```javascript\r\nrect.style('cursor', null)\r\n```\r\n\r\n`getter`__`returns`: `value`__\r\n\r\n`setter`__`returns`: `itself`__\r\n\r\n### fill()\r\nThe `fill()` method is a pretty alternative to the `attr()` method:\r\n\r\n```javascript\r\nrect.fill({ color: '#f06', opacity: 0.6 })\r\n```\r\n\r\nA single hex string will work as well:\r\n\r\n```javascript\r\nrect.fill('#f06')\r\n```\r\n\r\nLast but not least, you can also use an image as fill, simply by passing an image url:\r\n\r\n```javascript\r\nrect.fill('images/shade.jpg')\r\n```\r\n\r\nOr if you want more control over the size of the image, you can pass an image instance as well:\r\n\r\n```javascript\r\nrect.fill(draw.image('images/shade.jpg', 20, 20))\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### stroke()\r\nThe `stroke()` method is similar to `fill()`:\r\n\r\n```javascript\r\nrect.stroke({ color: '#f06', opacity: 0.6, width: 5 })\r\n```\r\n\r\nLike fill, a single hex string will work as well:\r\n\r\n```javascript\r\nrect.stroke('#f06')\r\n```\r\n\r\nNot unlike the `fill()` method, you can also use an image as stroke, simply by passing an image url:\r\n\r\n```javascript\r\nrect.stroke('images/shade.jpg')\r\n```\r\n\r\nOr if you want more control over the size of the image, you can pass an image instance as well:\r\n\r\n```javascript\r\nrect.stroke(draw.image('images/shade.jpg', 20, 20))\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### opacity()\r\nTo set the overall opacity of an element:\r\n\r\n```javascript\r\nrect.opacity(0.5)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### reference()\r\nIn cases where an element is linked to another element through an attribute, the linked element instance can be fetched with the `reference()` method. The only thing required is the attribute name:\r\n\r\n```javascript\r\nuse.reference('href') //-> returns used element instance\r\n// or\r\nrect.reference('fill') //-> returns gradient or pattern instance for example\r\n// or\r\ncircle.reference('clip-path') //-> returns clip instance\r\n```\r\n\r\n### hide()\r\nHide element:\r\n\r\n```javascript\r\nrect.hide()\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### show()\r\nShow element:\r\n\r\n```javascript\r\nrect.show()\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### visible()\r\nTo check if the element is visible:\r\n\r\n```javascript\r\nrect.visible()\r\n```\r\n\r\n__`returns`: `boolean`__\r\n\r\n## Classes\r\n\r\n### classes()\r\nFetches the css classes for the node as an array:\r\n\r\n```javascript\r\nrect.classes()\r\n```\r\n\r\n`getter`__`returns`: `array`__\r\n\r\n### hasClass()\r\nTest the presence of a given css class:\r\n\r\n```javascript\r\nrect.hasClass('purple-rain')\r\n```\r\n\r\n`getter`__`returns`: `boolean`__\r\n\r\n### addClass()\r\nAdds a given css class:\r\n\r\n```javascript\r\nrect.addClass('pink-flower')\r\n```\r\n\r\n`setter`__`returns`: `itself`__\r\n\r\n### removeClass()\r\nRemoves a given css class:\r\n\r\n```javascript\r\nrect.removeClass('pink-flower')\r\n```\r\n\r\n`setter`__`returns`: `itself`__\r\n\r\n### toggleClass()\r\nToggles a given css class:\r\n\r\n```javascript\r\nrect.toggleClass('pink-flower')\r\n```\r\n\r\n`setter`__`returns`: `itself`__\r\n\r\n## Size and position\r\n\r\nWhile positioning an element by directly setting its attributes works only if the attributes are used natively by that type of element, the positioning methods described below are much more convenient as they work for all element types.\r\n\r\nFor example, the following code works because each element is positioned by setting native attributes:\r\n\r\n```javascript\r\nrect.attr({ x: 20, y: 60 })\r\ncircle.attr({ cx: 50, cy: 40 })\r\n```\r\n\r\nThe `rect` will be moved by its upper left corner to the new coordinates, and the `circle` will be moved by its center. However, trying to move a `circle` by its 'corner' or a `rect` by its center in this way will fail. The following lines will get silently ignored as the attributes that are addressed are not natively used by the element setting them:\r\n\r\n```javascript\r\nrect.attr({ cx: 20, cy: 60 })\r\ncircle.attr({ x: 50, y: 40 })\r\n```\r\n\r\nHowever, the positioning methods detailed below will work for all element types, regardless of whether the attributes being addressed are native to the type. So, unlike the lines above, these lines work just fine:\r\n\r\n```javascript\r\nrect.cx(20).cy(60)\r\ncircle.x(50).y(40)\r\n```\r\n\r\nIt is important to note, though, that these methods are only intended for use with user (unitless) coordinates. If, for example, an element has its size set via percentages or other units, the positioning methods that address its native attributes will most likely still work, but the ones that address non-native attributes will give unexpected results -- as both getters and setters!\r\n\r\n\r\n### size()\r\nSet the size of an element to a given `width` and `height`:\r\n\r\n```javascript\r\nrect.size(200, 300)\r\n```\r\n\r\nProportional resizing is also possible by leaving out `height`:\r\n\r\n```javascript\r\nrect.size(200)\r\n```\r\n\r\nOr by passing `null` as the value for `width`:\r\n\r\n```javascript\r\nrect.size(null, 200)\r\n```\r\n\r\nAs with positioning, the size of an element could be set by using `attr()`. But because every type of element is handles its size differently the `size()` method is much more convenient.\r\n\r\nThere is one exception though: for `SVG.Text` elements, this method takes only one argument and applies the given value to the `font-size` attribute.\r\n\r\n__`returns`: `itself`__\r\n\r\n### width()\r\nSet the width of an element:\r\n\r\n```javascript\r\nrect.width(200)\r\n```\r\n\r\nThis method also acts as a getter:\r\n\r\n```javascript\r\nrect.width() //-> returns 200\r\n```\r\n\r\n`getter`__`returns`: `value`__\r\n\r\n`setter`__`returns`: `itself`__\r\n\r\n### height()\r\nSet the height of an element:\r\n\r\n```javascript\r\nrect.height(325)\r\n```\r\n\r\nThis method also acts as a getter:\r\n\r\n```javascript\r\nrect.height() //-> returns 325\r\n```\r\n\r\n`getter`__`returns`: `value`__\r\n\r\n`setter`__`returns`: `itself`__\r\n\r\n### radius()\r\nCircles, ellipses, and rects may use the `radius()` method. On rects, it defines rounded corners.\r\n\r\nFor a circle, the argument sets the `r` attribute. \r\n\r\n```javascript\r\ncircle.radius(10)\r\n```\r\n\r\nFor ellipses and rects, pass two arguments to set the `rx` and `ry` attributes individually. Or, pass a single argument, to make the two attributes equal.\r\n\r\n```javascript\r\nellipse.radius(10, 20)\r\nrect.radius(5)\r\n```\r\n\r\n_This functionality requires the sugar.js module which is included in the default distribution._\r\n\r\n__`returns`: `itself`__\r\n\r\n### move()\r\nMove the element by its upper left corner to a given `x` and `y` position:\r\n\r\n```javascript\r\nrect.move(200, 350)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### x()\r\nMove the element by its upper left corner along the x-axis only:\r\n\r\n```javascript\r\nrect.x(200)\r\n```\r\n\r\nWithout an argument the `x()` method serves as a getter as well:\r\n\r\n```javascript\r\nrect.x() //-> returns 200\r\n```\r\n\r\n`getter`__`returns`: `value`__\r\n\r\n`setter`__`returns`: `itself`__\r\n\r\n### y()\r\nMove the element by its upper left corner along the y-axis only:\r\n\r\n```javascript\r\nrect.y(350)\r\n```\r\n\r\nWithout an argument the `y()` method serves as a getter as well:\r\n\r\n```javascript\r\nrect.y() //-> returns 350\r\n```\r\n\r\n`getter`__`returns`: `value`__\r\n\r\n`setter`__`returns`: `itself`__\r\n\r\n### center()\r\nMove the element by its center to a given `cx` and `cy` position:\r\n\r\n```javascript\r\nrect.center(150, 150)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### cx()\r\nMove the element by its center in the `x` direction only:\r\n\r\n```javascript\r\nrect.cx(200)\r\n```\r\n\r\nWithout an argument the `cx()` method serves as a getter as well:\r\n\r\n```javascript\r\nrect.cx() //-> returns 200\r\n```\r\n\r\n`getter`__`returns`: `value`__\r\n\r\n`setter`__`returns`: `itself`__\r\n\r\n### cy()\r\nMove the element by its center in the `y` direction only:\r\n\r\n```javascript\r\nrect.cy(350)\r\n```\r\n\r\nWithout an argument the `cy()` method serves as a getter as well:\r\n\r\n```javascript\r\nrect.cy() //-> returns 350\r\n```\r\n\r\n`getter`__`returns`: `value`__\r\n\r\n`setter`__`returns`: `itself`__\r\n\r\n### dmove()\r\nShift the element in both the `x` and `y` directions relative to its current position:\r\n\r\n```javascript\r\nrect.dmove(10, 30)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### dx()\r\nShift the element in the `x` direction relative to its current position:\r\n\r\n```javascript\r\nrect.dx(200)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### dy()\r\nShift the element in the `y` direction relative to its current position:\r\n\r\n```javascript\r\nrect.dy(200)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n## Document tree manipulations\r\n\r\n### clone()\r\nTo make an exact copy of an element the `clone()` method comes in handy:\r\n\r\n```javascript\r\nvar clone = rect.clone()\r\n```\r\n\r\n__`returns`: `element`__\r\n\r\nThis will create a new, unlinked copy. For making a linked clone, see the [use](#use) element.\r\n\r\n### remove()\r\nRemoves the calling element from the svg document:\r\n\r\n```javascript\r\nrect.remove()\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### replace()\r\nAt the calling element's position in the svg document, replace the calling element with the element passed to the method.\r\n\r\n```javascript\r\nrect.replace(draw.circle(100))\r\n```\r\n\r\n__`returns`: `element`__\r\n\r\n\r\n### add()\r\nSets the calling element as the parent node of the argument. Returns the parent:\r\n\r\n```javascript\r\nvar rect = draw.rect(100, 100)\r\nvar group = draw.group()\r\n\r\ngroup.add(rect) //-> returns group\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### put()\r\nSets the calling element as the parent node of the argument. Returns the child:\r\n\r\n```javascript\r\ngroup.put(rect) //-> returns rect\r\n```\r\n\r\n__`returns`: `element`__\r\n\r\n### addTo()\r\nSets the calling element as a child node of the argument. Returns the child:\r\n\r\n```javascript\r\nrect.addTo(group) //-> returns rect\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### putIn()\r\nSets the calling element as a child node of the argument. Returns the parent:\r\n\r\n```javascript\r\nrect.putIn(group) //-> returns group\r\n```\r\n\r\n__`returns`: `element`__\r\n\r\n### toParent()\r\nMoves an element to a different parent (similar to `addTo`), but without changing its visual representation. All transformations are merged and applied to the element.\r\n\r\n```javascript\r\nrect.toParent(group) // looks the same as before\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### toDoc()\r\nSame as `toParent()` but with the root-node as parent\r\n\r\n__`returns`: `itself`__\r\n\r\n### ungroup() / flatten()\r\nBreak up a group/container and move all the elements to a given parent node without changing their visual representations. The result is a flat svg structure, e.g. for exporting.\r\n\r\n```javascript\r\n// ungroups all elements in this group recursively and places them into the given parent\r\n// (default: parent container of the calling element)\r\ngroup.ungroup(parent, depth)\r\n\r\n// call it on the whole document to get a flat svg structure\r\ndrawing.ungroup()\r\n\r\n// breaks up the group and places all elements in drawing\r\ngroup.ungroup(drawing)\r\n\r\n// breaks up all groups until it reaches a depth of 3\r\ndrawing.ungroup(null, 3)\r\n\r\n// flat and export svg\r\nvar svgString = drawing.ungroup().svg()\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n\r\n## Transforms\r\n\r\n### transform()\r\n\r\nThe `transform()` method acts as a full getter without an argument:\r\n\r\n```javascript\r\nelement.transform()\r\n```\r\n\r\nThe returned __`object`__ contains the following values:\r\n\r\n- `x` (translation on the x-axis)\r\n- `y` (translation on the y-axis)\r\n- `skewX` (calculated skew on x-axis)\r\n- `skewY` (calculated skew on y-axis)\r\n- `scaleX` (calculated scale on x-axis)\r\n- `scaleY` (calculated scale on y-axis)\r\n- `rotation` (calculated rotation)\r\n- `cx` (last used rotation centre on x-axis)\r\n- `cy` (last used rotation centre on y-axis)\r\n\r\nAdditionally a string value for the required property can be passed:\r\n\r\n```javascript\r\nelement.transform('rotation')\r\n```\r\n\r\nIn this case the returned value is a __`number`__.\r\n\r\n\r\nAs a setter it has two ways of working. By default transformations are absolute. For example, if you call:\r\n\r\n```javascript\r\nelement.transform({ rotation: 125 }).transform({ rotation: 37.5 })\r\n```\r\n\r\nThe resulting rotation will be `37.5` and not the sum of the two transformations. But if that's what you want there is a way out by adding the `relative` parameter. That would be:\r\n\r\n\r\n```javascript\r\nelement.transform({ rotation: 125 }).transform({ rotation: 37.5, relative: true })\r\n```\r\n\r\nAlternatively a relative flag can be passed as the second argument:\r\n\r\n```javascript\r\nelement.transform({ rotation: 125 }).transform({ rotation: 37.5 }, true)\r\n```\r\n\r\nAvailable transformations are:\r\n\r\n- `rotation` with optional `cx` and `cy`\r\n- `scale` with optional `cx` and `cy`\r\n- `scaleX` with optional `cx` and `cy`\r\n- `scaleY` with optional `cx` and `cy`\r\n- `skewX` with optional `cx` and `cy`\r\n- `skewY` with optional `cx` and `cy`\r\n- `x`\r\n- `y`\r\n- `a`, `b`, `c`, `d`, `e` and/or `f` or an existing matrix instead of the object\r\n\r\n`getter`__`returns`: `value`__\r\n\r\n`setter`__`returns`: `itself`__\r\n\r\n### rotate()\r\nThe `rotate()` method will automatically rotate elements according to the center of the element:\r\n\r\n```javascript\r\n// rotate(degrees)\r\nrect.rotate(45)\r\n```\r\n\r\nAlthough you can also define a specific rotation point:\r\n\r\n```javascript\r\n// rotate(degrees, cx, cy)\r\nrect.rotate(45, 50, 50)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### skew()\r\nThe `skew()` method will take an `x` and `y` value:\r\n\r\n```javascript\r\n// skew(x, y)\r\nrect.skew(0, 45)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### scale()\r\nThe `scale()` method will take an `x` and `y` value:\r\n\r\n```javascript\r\n// scale(x, y)\r\nrect.scale(0.5, -1)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### translate()\r\nThe `translate()` method will take an `x` and `y` value:\r\n\r\n```javascript\r\n// translate(x, y)\r\nrect.translate(0.5, -1)\r\n```\r\n\r\n\r\n## Geometry\r\n\r\n### viewbox()\r\n\r\nThe `viewBox` attribute of an `<svg>` element can be managed with the `viewbox()` method. When supplied with four arguments it will act as a setter:\r\n\r\n```javascript\r\ndraw.viewbox(0, 0, 297, 210)\r\n```\r\n\r\nAlternatively you can also supply an object as the first argument:\r\n\r\n```javascript\r\ndraw.viewbox({ x: 0, y: 0, width: 297, height: 210 })\r\n```\r\n\r\nWithout any arguments an instance of `SVG.ViewBox` will be returned:\r\n\r\n```javascript\r\nvar box = draw.viewbox()\r\n```\r\n\r\nBut the best thing about the `viewbox()` method is that you can get the zoom of the viewbox:\r\n\r\n```javascript\r\nvar box = draw.viewbox()\r\nvar zoom = box.zoom\r\n```\r\n\r\nIf the size of the viewbox equals the size of the svg drawing, the zoom value will be 1.\r\n\r\n`getter`__`returns`: `SVG.ViewBox`__\r\n\r\n`setter`__`returns`: `itself`__\r\n\r\n### bbox()\r\nGet the bounding box of an element. This is a wrapper for the native `getBBox()` method but adds more values:\r\n\r\n```javascript\r\npath.bbox()\r\n```\r\n\r\nThis will return an instance of `SVG.BBox` containing the following values:\r\n\r\n- `width` (value from native `getBBox`)\r\n- `height` (value from native `getBBox`)\r\n- `w` (shorthand for `width`)\r\n- `h` (shorthand for `height`)\r\n- `x` (value from native `getBBox`) \r\n- `y` (value from native `getBBox`)\r\n- `cx` (center `x` of the bounding box)\r\n- `cy` (center `y` of the bounding box)\r\n- `x2` (lower right `x` of the bounding box)\r\n- `y2` (lower right `y` of the bounding box)\r\n\r\nThe `SVG.BBox` has one other nifty little feature, enter the `merge()` method. With `merge()` two `SVG.BBox` instances can be merged into one new instance, basically being the bounding box of the two original bounding boxes:\r\n\r\n```javascript\r\nvar box1 = draw.rect(100,100).move(50,50)\r\nvar box2 = draw.rect(100,100).move(200,200)\r\nvar box3 = box1.merge(box2)\r\n```\r\n\r\n__`returns`: `SVG.BBox`__\r\n\r\n### tbox()\r\nWhere `bbox()` returns a bounding box mindless of any transformations, the `tbox()` method does take transformations into account. So any translation or scale will be applied to the resulting values to get closer to the actual visual representation:\r\n\r\n```javascript\r\npath.tbox()\r\n```\r\n\r\nThis will return an instance of `SVG.TBox` containing the following values:\r\n\r\n- `width` (value from native getBBox influenced by the `scaleX` of the current matrix)\r\n- `height` (value from native getBBox influenced by the `scaleY` of the current matrix)\r\n- `w` (shorthand for `width`)\r\n- `h` (shorthand for `height`)\r\n- `x` (value from native getBBox influenced by the `x` of the current matrix)\r\n- `y` (value from native getBBox influenced by the `y` of the current matrix)\r\n- `cx` (center `x` of the bounding box)\r\n- `cy` (center `y` of the bounding box)\r\n- `x2` (lower right `x` of the bounding box)\r\n- `y2` (lower right `y` of the bounding box)\r\n\r\nNote that the rotation of the element will not be added to the calculation.\r\n\r\n__`returns`: `SVG.TBox`__\r\n\r\n### rbox()\r\nIs similar to `bbox()` but will give you the box around the exact visual representation of the element, taking all transformations into account.\r\n\r\n```javascript\r\npath.rbox()\r\n```\r\n\r\nThis will return an instance of `SVG.RBox` containing the following values:\r\n\r\n- `width` (the actual visual width)\r\n- `height` (the actual visual height)\r\n- `w` (shorthand for `width`)\r\n- `h` (shorthand for `height`)\r\n- `x` (the actual visual position on the x-axis)\r\n- `y` (the actual visual position on the y-axis)\r\n- `cx` (center `x` of the bounding box)\r\n- `cy` (center `y` of the bounding box)\r\n- `x2` (lower right `x` of the bounding box)\r\n- `y2` (lower right `y` of the bounding box)\r\n\r\n__Important__: Mozilla browsers include stroke widths where other browsers do not. Therefore the resulting box might be different in Mozilla browsers. It is very hard to modify this behavior so for the time being this is an inconvenience we have to live with.\r\n\r\n__`returns`: `SVG.RBox`__\r\n\r\n### ctm()\r\nRetreives the current transform matrix of the element relative to the nearest viewport parent:\r\n\r\n```javascript\r\npath.ctm()\r\n```\r\n\r\n__`returns`: `SVG.Matrix`__\r\n\r\n### screenCTM()\r\nRetreives the current transform matrix of the element relative to the screen:\r\n\r\n```javascript\r\npath.screenCTM()\r\n```\r\n\r\n__`returns`: `SVG.Matrix`__\r\n\r\n### matrixify()\r\nMerges all transformations of the element into one single matrix which is returned\r\n\r\n```javascript\r\npath.matrixify()\r\n```\r\n\r\n__`returns`: `SVG.Matrix`__\r\n\r\n\r\n### inside()\r\nTo check if a given point is inside the bounding box of an element you can use the `inside()` method:\r\n\r\n```javascript\r\nvar rect = draw.rect(100, 100).move(50, 50)\r\n\r\nrect.inside(25, 30) //-> returns false\r\nrect.inside(60, 70) //-> returns true\r\n```\r\n\r\nNote: the `x` and `y` positions are tested against the relative position of the element. Any offset on the parent element is not taken into account.\r\n\r\n__`returns`: `boolean`__\r\n\r\n### length()\r\nGet the total length of a path element:\r\n\r\n```javascript\r\nvar length = path.length()\r\n```\r\n\r\n__`returns`: `number`__\r\n\r\n### pointAt()\r\nGet point on a path at given length:\r\n\r\n```javascript\r\nvar point = path.pointAt(105) //-> returns { x : 96.88497924804688, y : 58.062747955322266 }\r\n```\r\n\r\n__`returns`: `object`__\r\n\r\n\r\n## Animating elements\r\n\r\n### Animatable method chain\r\nNote that the `animate()` method will not return the targeted element but an instance of SVG.FX which will take the following methods:\r\n\r\nOf course `attr()`:\r\n```javascript\r\nrect.animate().attr({ fill: '#f03' })\r\n```\r\n\r\nThe `x()`, `y()` and `move()` methods:\r\n```javascript\r\nrect.animate().move(100, 100)\r\n```\r\n\r\nAnd the `cx()`, `cy()` and `center()` methods:\r\n```javascript\r\nrect.animate().center(200, 200)\r\n```\r\n\r\nIf you include the sugar.js module, `fill()`, `stroke()`, `rotate()`, `skew()`, `scale()`, `matrix()`, `opacity()`, `radius()` will be available as well:\r\n```javascript\r\nrect.animate().rotate(45).skew(25, 0)\r\n```\r\n\r\nYou can also animate non-numeric unit values using the `attr()` method:\r\n```javascript\r\nrect.attr('x', '10%').animate().attr('x', '50%')\r\n```\r\n\r\n### easing\r\nAll available ease types are:\r\n\r\n- `<>`: ease in and out\r\n- `>`: ease out\r\n- `<`: ease in\r\n- `-`: linear\r\n- `=`: external control\r\n- a function\r\n\r\nFor the latter, here is an example of the default `<>` function:\r\n\r\n```javascript\r\nfunction(pos) { return (-Math.cos(pos * Math.PI) / 2) + 0.5 }\r\n```\r\n\r\nFor more easing equations, have a look at the [svg.easing.js](https://github.com/wout/svg.easing.js) plugin.\r\n\r\n### animate()\r\nAnimating elements is very much the same as manipulating elements, the only difference is you have to include the `animate()` method:\r\n\r\n```javascript\r\nrect.animate().move(150, 150)\r\n```\r\n\r\nThe `animate()` method will take three arguments. The first is `duration`, the second `ease` and the third `delay`:\r\n\r\n```javascript\r\nrect.animate(2000, '>', 1000).attr({ fill: '#f03' })\r\n```\r\n\r\nAlternatively you can pass an object as the first argument:\r\n\r\n```javascript\r\nrect.animate({ ease: '<', delay: '1.5s' }).attr({ fill: '#f03' })\r\n```\r\n\r\nBy default `duration` will be set to `1000`, `ease` will be set to `<>`.\r\n\r\n__`returns`: `SVG.FX`__\r\n\r\n\r\n### pause()\r\nPausing an animations is fairly straightforward:\r\n\r\n```javascript\r\nrect.animate().move(200, 200)\r\n\r\nrect.mouseover(function() { this.pause() })\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### play()\r\nWill start playing a paused animation:\r\n\r\n```javascript\r\nrect.animate().move(200, 200)\r\n\r\nrect.mouseover(function() { this.pause() })\r\nrect.mouseout(function() { this.play() })\r\n```\r\n__`returns`: `itself`__\r\n\r\n### stop()\r\nAnimations can be stopped in two ways.\r\n\r\nBy calling the `stop()` method:\r\n```javascript\r\nrect.animate().move(200, 200)\r\n\r\nrect.stop()\r\n```\r\n\r\nOr by invoking another animation:\r\n```javascript\r\nrect.animate().move(200, 200)\r\n\r\nrect.animate().center(200, 200)\r\n```\r\n\r\nBy calling `stop()`, the transition is left at its current position. By passing `true` as the first argument to `stop()`, the animation will be fulfilled instantly:\r\n\r\n```javascript\r\nrect.animate().move(200, 200)\r\n\r\nrect.stop(true)\r\n```\r\n\r\nStopping an animation is irreversable.\r\n\r\n__`returns`: `itself`__\r\n\r\n### during()\r\nIf you want to perform your own actions during the animations you can use the `during()` method:\r\n\r\n```javascript\r\nvar position\r\n  , from = 100\r\n  , to   = 300\r\n\r\nrect.animate(3000).move(100, 100).during(function(pos) {\r\n  position = from + (to - from) * pos \r\n})\r\n```\r\nNote that `pos` is `0` in the beginning of the animation and `1` at the end of the animation.\r\n\r\nTo make things easier a morphing function is passed as the second argument. This function accepts a `from` and `to` value as the first and second argument and they can be a number, unit or hex color:\r\n\r\n```javascript\r\nvar ellipse = draw.ellipse(100, 100).attr('cx', '20%').fill('#333')\r\n\r\nrect.animate(3000).move(100, 100).during(function(pos, morph) {\r\n  // numeric values\r\n  ellipse.size(morph(100, 200), morph(100, 50))\r\n  \r\n  // unit strings\r\n  ellipse.attr('cx', morph('20%', '80%'))\r\n  \r\n  // hex color strings\r\n  ellipse.fill(morph('#333', '#ff0066'))\r\n})\r\n```\r\n\r\n__`returns`: `SVG.FX`__\r\n\r\n### loop()\r\nBy default the `loop()` method creates and eternal loop:\r\n\r\n```javascript\r\nrect.animate(3000).move(100, 100).loop()\r\n```\r\n\r\nBut the loop can also be a predefined number of times:\r\n\r\n```javascript\r\nrect.animate(3000).move(100, 100).loop(3)\r\n```\r\n\r\nLoops go from beginning to end and start over again (`0->1.0->1.0->1.`).\r\n\r\nThere is also a reverse flag that should be passed as the second argument:\r\n\r\n```javascript\r\nrect.animate(3000).move(100, 100).loop(3, true)\r\n```\r\n\r\nLoops will then be completely reversed before starting over (`0->1->0->1->0->1.`).\r\n\r\n__`returns`: `SVG.FX`__\r\n\r\n### after()\r\nFinally, you can add callback methods using `after()`:\r\n\r\n```javascript\r\nrect.animate(3000).move(100, 100).after(function() {\r\n  this.animate().attr({ fill: '#f06' })\r\n})\r\n```\r\n\r\nNote that the `after()` method will never be called if the animation is looping eternally. \r\n\r\n__`returns`: `SVG.FX`__\r\n\r\n### at()\r\nSay you want to control the position of an animation with an external event, then the `at()` method will proove very useful:\r\n\r\n```javascript\r\nvar animation = draw.rect(100, 100).move(50, 50).animate('=').move(200, 200)\r\n\r\ndocument.onmousemove = function(event) {\r\n  animation.at(event.clientX / 1000)\r\n}\r\n```\r\n\r\nIn order to be able to use the `at()` method, the duration of the animation should be set to `'='`. The value passed as the first argument of `at()` should be a number between `0` and `1`, `0` being the beginning of the animation and `1` being the end. Note that any values below `0` and above `1` will be normalized.\r\n\r\n_This functionality requires the fx.js module which is included in the default distribution._\r\n\r\n__`returns`: `SVG.FX`__\r\n\r\n\r\n### situation\r\nThe current situation of an animation is stored in the `situation` object:\r\n\r\n```javascript\r\nrect.animate(3000).move(100, 100)\r\nrect.fx.situation //-> everything is in here\r\n```\r\n\r\nAvailable values are:\r\n\r\n- `start` (start time as a number in milliseconds)\r\n- `play` (animation playing or not; `true` or `false`)\r\n- `pause` (time when the animation was last paused)\r\n- `duration` (the chosen duration of the animation)\r\n- `ease` (the chosen easing calculation)\r\n- `finish` (start + duration)\r\n- `loop` (the current loop; counting down if a number; `true`, `false` or a number)\r\n- `loops` (if a number, the total number loops; `true`, `false` or a number)\r\n- `reverse` (whether or not the loop should be reversed; `true` or `false`)\r\n- `reversing` (`true` if the loop is currently reversing, otherwise `false`)\r\n- `during` (the function that should be called on every keyframe)\r\n- `after` (the function that should be called after completion)\r\n\r\n\r\n## Masking elements\r\n\r\n### maskWith()\r\nThe easiest way to mask is to use a single element:\r\n\r\n```javascript\r\nvar ellipse = draw.ellipse(80, 40).move(10, 10).fill({ color: '#fff' })\r\n\r\nrect.maskWith(ellipse)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### mask()\r\nBut you can also use multiple elements:\r\n\r\n```javascript\r\nvar ellipse = draw.ellipse(80, 40).move(10, 10).fill({ color: '#fff' })\r\nvar text = draw.text('SVG.JS').move(10, 10).font({ size: 36 }).fill({ color: '#fff' })\r\n\r\nvar mask = draw.mask().add(text).add(ellipse)\r\n\r\nrect.maskWith(mask)\r\n```\r\n\r\nIf you want the masked object to be rendered at 100% you need to set the fill color of the masking object to white. But you might also want to use a gradient:\r\n\r\n```javascript\r\nvar gradient = draw.gradient('linear', function(stop) {\r\n  stop.at({ offset: 0, color: '#000' })\r\n  stop.at({ offset: 1, color: '#fff' })\r\n})\r\n\r\nvar ellipse = draw.ellipse(80, 40).move(10, 10).fill({ color: gradient })\r\n\r\nrect.maskWith(ellipse)\r\n```\r\n\r\n__`returns`: `SVG.Mask`__\r\n\r\n### unmask()\r\nUnmasking the elements can be done with the `unmask()` method:\r\n\r\n```javascript\r\nrect.unmask()\r\n```\r\n\r\nThe `unmask()` method returns the masking element.\r\n\r\n__`returns`: `itself`__\r\n\r\n### remove()\r\nRemoving the mask alltogether will also `unmask()` all masked elements as well:\r\n\r\n```javascript\r\nmask.remove()\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### masker\r\nFor your convenience, the masking element is also referenced in the masked element. This can be useful in case you want to change the mask:\r\n\r\n```javascript\r\nrect.masker.fill('#fff')\r\n```\r\n\r\n_This functionality requires the mask.js module which is included in the default distribution._\r\n\r\n\r\n## Clipping elements\r\nClipping elements works exactly the same as masking elements. The only difference is that clipped elements will adopt the geometry of the clipping element. Therefore events are only triggered when entering the clipping element whereas with masks the masked element triggers the event. Another difference is that masks can define opacity with their fill color and clipPaths don't.\r\n\r\n### clipWith()\r\n```javascript\r\nvar ellipse = draw.ellipse(80, 40).move(10, 10)\r\n\r\nrect.clipWith(ellipse)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### clip()\r\nClip multiple elements:\r\n\r\n```javascript\r\nvar ellipse = draw.ellipse(80, 40).move(10, 10)\r\nvar text = draw.text('SVG.JS').move(10, 10).font({ size: 36 })\r\n\r\nvar clip = draw.clip().add(text).add(ellipse)\r\n\r\nrect.clipWith(clip)\r\n```\r\n\r\n__`returns`: `SVG.ClipPath`__\r\n\r\n### unclip()\r\nUnclipping the elements can be done with the `unclip()` method:\r\n\r\n```javascript\r\nrect.unclip()\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### remove()\r\nRemoving the clip alltogether will also `unclip()` all clipped elements as well:\r\n\r\n```javascript\r\nclip.remove()\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### clipper\r\nFor your convenience, the clipping element is also referenced in the clipped element. This can be useful in case you want to change the clipPath:\r\n\r\n```javascript\r\nrect.clipper.move(10, 10)\r\n```\r\n\r\n_This functionality requires the clip.js module which is included in the default distribution._\r\n\r\n\r\n## Arranging elements\r\nYou can arrange elements within their parent SVG document using the following methods.\r\n\r\n### front()\r\nMove element to the front:\r\n\r\n```javascript\r\nrect.front()\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### back()\r\nMove element to the back:\r\n\r\n```javascript\r\nrect.back()\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### forward()\r\nMove element one step forward:\r\n\r\n```javascript\r\nrect.forward()\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### backward()\r\nMove element one step backward:\r\n\r\n```javascript\r\nrect.backward()\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### siblings()\r\nThe arrange.js module brings some additional methods. To get all siblings of rect, including rect itself:\r\n\r\n```javascript\r\nrect.siblings()\r\n```\r\n\r\n__`returns`: `array`__\r\n\r\n### position()\r\nGet the position (a number) of rect between its siblings:\r\n\r\n```javascript\r\nrect.position()\r\n```\r\n\r\n__`returns`: `number`__\r\n\r\n### next()\r\nGet the next sibling:\r\n\r\n```javascript\r\nrect.next()\r\n```\r\n\r\n__`returns`: `element`__\r\n\r\n### previous()\r\nGet the previous sibling:\r\n\r\n```javascript\r\nrect.previous()\r\n```\r\n\r\n__`returns`: `element`__\r\n\r\n### before()\r\nInsert an element before another:\r\n\r\n```javascript\r\n// inserts circle before rect\r\nrect.before(circle)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### after()\r\nInsert an element after another:\r\n\r\n```javascript\r\n// inserts circle after rect\r\nrect.after(circle)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n_This functionality requires the arrange.js module which is included in the default distribution._\r\n\r\n\r\n## Sets\r\nSets are very useful if you want to modify or animate multiple elements at once. A set will accept all the same methods accessible on individual elements, even the ones that you add with your own plugins! Creating a set is exactly as you would expect:\r\n\r\n```javascript\r\n// create some elements\r\nvar rect = draw.rect(100,100)\r\nvar circle = draw.circle(100).move(100,100).fill('#f09')\r\n\r\n// create a set and add the elements\r\nvar set = draw.set()\r\nset.add(rect).add(circle)\r\n\r\n// change the fill of all elements in the set at once\r\nset.fill('#ff0')\r\n```\r\n\r\nA single element can be a member of many sets. Sets also don't have a structural representation, in fact they are just fancy array's.\r\n\r\n### add()\r\nAdd an element to a set:\r\n\r\n```javascript\r\nset.add(rect)\r\n```\r\n\r\nQuite a useful feature of sets is the ability to accept multiple elements at once:\r\n\r\n```javascript\r\nset.add(rect, circle)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### each()\r\nIterating over all members in a set is the same as with svg containers:\r\n\r\n```javascript\r\nset.each(function(i) {\r\n  this.attr('id', 'shiny_new_id_' + i)\r\n})\r\n```\r\n\r\nNote that `this` refers to the current child element.\r\n\r\n__`returns`: `itself`__\r\n\r\n### has()\r\nDetermine if an element is member of the set:\r\n\r\n```javascript\r\nset.has(rect)\r\n```\r\n\r\n__`returns`: `boolean`__\r\n\r\n### index()\r\nReturns the index of a given element in the set.\r\n\r\n```javascript\r\nset.index(rect) //-> -1 if element is not a member\r\n```\r\n\r\n__`returns`: `number`__\r\n\r\n### get()\r\nGets the element at a given index:\r\n\r\n```javascript\r\nset.get(1)\r\n```\r\n\r\n__`returns`: `element`__\r\n\r\n### first()\r\nGets the first element:\r\n\r\n```javascript\r\nset.first()\r\n```\r\n\r\n__`returns`: `element`__\r\n\r\n### last()\r\nGets the last element:\r\n\r\n```javascript\r\nset.last()\r\n```\r\n\r\n__`returns`: `element`__\r\n\r\n### bbox()\r\nGet the bounding box of all elements in the set:\r\n\r\n```javascript\r\nset.bbox()\r\n```\r\n\r\n__`returns`: `SVG.BBox`__\r\n\r\n### remove()\r\nTo remove an element from a set:\r\n\r\n```javascript\r\nset.remove(rect)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### clear()\r\nOr to remove all elements from a set:\r\n\r\n```javascript\r\nset.clear()\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### animate()\r\nSets work with animations as well:\r\n\r\n```javascript\r\nset.animate(3000).fill('#ff0')\r\n```\r\n\r\n__`returns`: `SVG.SetFX`__\r\n\r\n\r\n## Gradient\r\n\r\n### gradient()\r\nThere are linear and radial gradients. The linear gradient can be created like this:\r\n\r\n```javascript\r\nvar gradient = draw.gradient('linear', function(stop) {\r\n  stop.at(0, '#333')\r\n  stop.at(1, '#fff')\r\n})\r\n```\r\n\r\n__`returns`: `SVG.Gradient`__\r\n\r\n### at()\r\nThe `offset` and `color` parameters are required for stops, `opacity` is optional. Offset is float between 0 and 1, or a percentage value (e.g. `33%`). \r\n\r\n```javascript\r\nstop.at(0, '#333')\r\n```\r\n\r\nor\r\n\r\n```javascript\r\nstop.at({ offset: 0, color: '#333', opacity: 1 })\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### from()\r\nTo define the direction you can set from `x`, `y` and to `x`, `y`:\r\n\r\n```javascript\r\ngradient.from(0, 0).to(0, 1)\r\n```\r\n\r\nThe from and to values are also expressed in percent.\r\n\r\n__`returns`: `itself`__\r\n\r\n### to()\r\nTo define the direction you can set from `x`, `y` and to `x`, `y`:\r\n\r\n```javascript\r\ngradient.from(0, 0).to(0, 1)\r\n```\r\n\r\nThe from and to values are also expressed in percent.\r\n\r\n__`returns`: `itself`__\r\n\r\n### radius()\r\nRadial gradients have a `radius()` method to define the outermost radius to where the inner color should develop:\r\n\r\n```javascript\r\nvar gradient = draw.gradient('radial', function(stop) {\r\n  stop.at(0, '#333')\r\n  stop.at(1, '#fff')\r\n})\r\n\r\ngradient.from(0.5, 0.5).to(0.5, 0.5).radius(0.5)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### update()\r\nA gradient can also be updated afterwards:\r\n\r\n```javascript\r\ngradient.update(function(stop) {\r\n  stop.at(0.1, '#333', 0.2)\r\n  stop.at(0.9, '#f03', 1)\r\n})\r\n```\r\n\r\nAnd even a single stop can be updated:\r\n\r\n```javascript\r\nvar s1, s2, s3\r\n\r\ndraw.gradient('radial', function(stop) {\r\n  s1 = stop.at(0, '#000')\r\n  s2 = stop.at(0.5, '#f03')\r\n  s3 = stop.at(1, '#066')\r\n})\r\n\r\ns1.update(0.1, '#0f0', 1)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### get()\r\nThe `get()` method makes it even easier to get a stop from an existing gradient:\r\n\r\n```javascript\r\nvar gradient = draw.gradient('radial', function(stop) {\r\n  stop.at({ offset: 0, color: '#000', opacity: 1 })   // -> first\r\n  stop.at({ offset: 0.5, color: '#f03', opacity: 1 }) // -> second\r\n  stop.at({ offset: 1, color: '#066', opacity: 1 })   // -> third\r\n})\r\n\r\nvar s1 = gradient.get(0) // -> returns \"first\" stop\r\n```\r\n\r\n__`returns`: `SVG.Stop`__\r\n\r\n### fill()\r\nFinally, to use the gradient on an element:\r\n\r\n```javascript\r\nrect.attr({ fill: gradient })\r\n```\r\n\r\nOr:\r\n\r\n```javascript\r\nrect.fill(gradient)\r\n```\r\n\r\nBy passing the gradient instance as the fill on any element, the `fill()` method will be called:\r\n\r\n```javascript\r\ngradient.fill() //-> returns 'url(#SvgjsGradient1234)'\r\n```\r\n\r\n[W3Schools](http://www.w3schools.com/svg/svg_grad_linear.asp) has a great example page on how\r\n[linear gradients](http://www.w3schools.com/svg/svg_grad_linear.asp) and\r\n[radial gradients](http://www.w3schools.com/svg/svg_grad_radial.asp) work.\r\n\r\n_This functionality requires the gradient.js module which is included in the default distribution._\r\n\r\n__`returns`: `value`__\r\n\r\n\r\n## Pattern\r\n\r\n### pattern()\r\nCreating a pattern is very similar to creating gradients:\r\n\r\n```javascript\r\nvar pattern = draw.pattern(20, 20, function(add) {\r\n  add.rect(20,20).fill('#f06')\r\n  add.rect(10,10)\r\n  add.rect(10,10).move(10,10)\r\n})\r\n```\r\n\r\nThis creates a checkered pattern of 20 x 20 pixels. You can add any available element to your pattern.\r\n\r\n__`returns`: `SVG.Pattern`__\r\n\r\n\r\n### update()\r\nA pattern can also be updated afterwards:\r\n\r\n```javascript\r\npattern.update(function(add) {\r\n  add.circle(15).center(10,10)\r\n})\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n\r\n### fill()\r\nFinally, to use the pattern on an element:\r\n\r\n```javascript\r\nrect.attr({ fill: pattern })\r\n```\r\n\r\nOr:\r\n\r\n```javascript\r\nrect.fill(pattern)\r\n```\r\n\r\nBy passing the pattern instance as the fill on any element, the `fill()` method will be called on th pattern instance:\r\n\r\n```javascript\r\npattern.fill() //-> returns 'url(#SvgjsPattern1234)'\r\n```\r\n\r\n__`returns`: `value`__\r\n\r\n\r\n## Marker\r\n\r\n### marker()\r\nMarkers can be added to every individual point of a `line`, `polyline`, `polygon` and `path`. There are three types of markers: `start`, `mid` and `end`. Where `start` represents the first point, `end` the last and `mid` every point in between.\r\n\r\n```javascript\r\nvar path = draw.path('M 100 200 C 200 100 300  0 400 100 C 500 200 600 300 700 200 C 800 100 900 100 900 100z')\r\n\r\npath.fill('none').stroke({ width: 1 })\r\n\r\npath.marker('start', 10, 10, function(add) {\r\n  add.circle(10).fill('#f06')\r\n})\r\npath.marker('mid', 10, 10, function(add) {\r\n  add.rect(10, 10)\r\n})\r\npath.marker('end', 20, 20, function(add) {\r\n  add.circle(6).center(4, 5)\r\n  add.circle(6).center(4, 15)\r\n  add.circle(6).center(16, 10)\r\n\r\n  this.fill('#0f6')\r\n})\r\n```\r\n\r\nThe `marker()` method can be used in three ways. Firstly, a marker can be created on any container element (e.g. svg, nested, group, ...). This is useful if you plan to reuse the marker many times so it will create a marker in the defs but not show it yet:\r\n\r\n```javascript\r\nvar marker = draw.marker(10, 10, function(add) {\r\n  add.rect(10, 10)\r\n})\r\n```\r\n\r\nSecondly a marker can be created and applied directly on its target element:\r\n\r\n```javascript\r\npath.marker('start', 10, 10, function(add) {\r\n  add.circle(10).fill('#f06')\r\n})\r\n```\r\n\r\nThis will create a marker in the defs and apply it directly. Note that the first argument defines the position of the marker and that there are four arguments as opposed to three with the first example.\r\n\r\nLastly, if a marker is created for reuse on a container element, it can be applied directly on the target element:\r\n\r\n```javascript\r\npath.marker('mid', marker)\r\n```\r\n\r\nFinally, to get a marker instance from the target element reference:\r\n\r\n```javascript\r\npath.reference('marker-end')\r\n```\r\n\r\n\r\n### ref()\r\nBy default the `refX` and `refY` attributes of a marker are set to respectively half the `width` nd `height` values. To define the `refX` and `refY` of a marker differently:\r\n\r\n```javascript\r\nmarker.ref(2, 7)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### update()\r\nUpdating the contents of a marker will `clear()` the existing content and add the content defined in the block passed as the first argument:\r\n\r\n```javascript\r\nmarker.update(function(add) {\r\n  add.circle(10)\r\n})\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### width()\r\nDefines the `markerWidth` attribute:\r\n\r\n```javascript\r\nmarker.width(10)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### height()\r\nDefines the `markerHeight` attribute:\r\n\r\n```javascript\r\nmarker.height(10)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### size()\r\nDefines the `markerWidth` and `markerHeight` attributes:\r\n\r\n```javascript\r\nmarker.size(10, 10)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n\r\n## Data\r\n\r\n### Setting\r\nThe `data()` method allows you to bind arbitrary objects, strings and numbers to SVG elements:\r\n\r\n```javascript\r\nrect.data('key', { value: { data: 0.3 }})\r\n```\r\n\r\nOr set multiple values at once:\r\n\r\n```javascript\r\nrect.data({\r\n  forbidden: 'fruit'\r\n, multiple: {\r\n    values: 'in'\r\n  , an: 'object'\r\n  }\r\n})\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### Getting\r\nFetching the values is similar to the `attr()` method:\r\n\r\n```javascript\r\nrect.data('key')\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### Removing\r\nRemoving the data altogether:\r\n\r\n```javascript\r\nrect.data('key', null)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### Sustaining data types\r\nYour values will always be stored as JSON and in some cases this might not be desirable. If you want to store the value as-is, just pass true as the third argument:\r\n\r\n```javascript\r\nrect.data('key', 'value', true)\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n\r\n## Memory\r\n\r\n### remember() \r\nStoring data in-memory is very much like setting attributes:\r\n\r\n```javascript\r\nrect.remember('oldBBox', rect.bbox())\r\n```\r\n\r\nMultiple values can also be remembered at once:\r\n\r\n```javascript\r\nrect.remember({\r\n  oldFill:    rect.attr('fill')\r\n, oldStroke:  rect.attr('stroke')\r\n})\r\n```\r\n\r\nTo retrieve a memory\r\n\r\n```javascript\r\nrect.remember('oldBBox')\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### forget()\r\nErasing a single memory:\r\n\r\n```javascript\r\nrect.forget('oldBBox')\r\n```\r\n\r\nOr erasing multiple memories at once:\r\n\r\n\r\n```javascript\r\nrect.forget('oldFill', 'oldStroke')\r\n```\r\n\r\nAnd finally, just erasing the whole memory:\r\n\r\n```javascript\r\nrect.forget()\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n## Events\r\n\r\n### Basic events\r\nEvents can be bound to elements as follows:\r\n\r\n```javascript\r\nrect.click(function() {\r\n  this.fill({ color: '#f06' })\r\n})\r\n```\r\n\r\nRemoving it is quite as easy:\r\n\r\n```javascript\r\nrect.click(null)\r\n```\r\n\r\nAll available events are: `click`, `dblclick`, `mousedown`, `mouseup`, `mouseover`, `mouseout`, `mousemove`, `touchstart`, `touchmove`, `touchleave`, `touchend` and `touchcancel`.\r\n\r\n__`returns`: `itself`__\r\n\r\n### Event listeners\r\nYou can also bind event listeners to elements:\r\n\r\n```javascript\r\nvar click = function() {\r\n  this.fill({ color: '#f06' })\r\n}\r\n\r\nrect.on('click', click)\r\n```\r\n\r\n**Note:** The context of `this` in the callback is bound to the element. You can change this context by applying your own object:\r\n\r\n```javascript\r\nrect.on('click', click, window) // context of this is window\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\nUnbinding events is just as easy:\r\n\r\n```javascript\r\nrect.off('click', click)\r\n```\r\n\r\nOr to unbind all listeners for a given event:\r\n\r\n```javascript\r\nrect.off('click')\r\n```\r\n\r\nOr even unbind all listeners for all events:\r\n\r\n```javascript\r\nrect.off()\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\nBut there is more to event listeners. You can bind events to html elements as well:\r\n\r\n```javascript\r\nSVG.on(window, 'click', click)\r\n```\r\n\r\nObviously unbinding is practically the same:\r\n\r\n```javascript\r\nSVG.off(window, 'click', click)\r\n```\r\n\r\n### Custom events\r\nYou can even use your own events.\r\n\r\nJust add an event listener for your event:\r\n```javascript\r\nrect.on('myevent', function() {\r\n  alert('ta-da!')\r\n})\r\n```\r\n\r\nNow you are ready to fire the event whenever you need:\r\n\r\n```javascript\r\nfunction whenSomethingHappens() {\r\n  rect.fire('myevent') \r\n}\r\n\r\n// or if you want to pass an event\r\nfunction whenSomethingHappens(event) {\r\n  rect.fire(event) \r\n}\r\n\r\n```\r\n\r\nYou can also pass some data to the event:\r\n\r\n```javascript\r\nfunction whenSomethingHappens() {\r\n  rect.fire('myevent', {some:'data'}) \r\n}\r\n\r\nrect.on('myevent', function(e) {\r\n  alert(e.detail.some) // outputs 'data'\r\n})\r\n```\r\n\r\nsvg.js supports namespaced events following the syntax `event.namespace`.\r\n\r\nA namespaced event behaves like a normal event with the difference that you can remove it without touching handlers from other namespaces.\r\n\r\n```\r\n// attach\r\nrect.on('myevent.namespace', function(e) {\r\n  // do something\r\n})\r\n\r\n// detach all handlers of namespace for myevent\r\nrect.off('myevent.namespace')\r\n\r\n// detach all handlers of namespace\r\nrect.off('.namespace')\r\n\r\n// detach all handlers including all namespaces\r\nrect.off('myevent)\r\n```\r\n\r\nHowever you can't fire a specific namespaced event. Calling `rect.fire('myevent.namespace')` won't do anything while `rect.fire('myevent')` works and fires all attached handlers of the event\r\n\r\n_Important: always make sure you namespace your event to avoid conflicts. Preferably use something very specific. So `event.wicked` for example would be better than something generic like `event.svg`._\r\n\r\n## Numbers\r\n\r\nNumbers in SVG.js have a dedicated number class to be able to process string values. Creating a new number is simple:\r\n\r\n```javascript\r\nvar number = new SVG.Number('78%')\r\nnumber.plus('3%').toString() //-> returns '81%'\r\nnumber.valueOf() //-> returns 0.81\r\n```\r\n\r\nOperators are defined as methods on the `SVG.Number` instance.\r\n\r\n### plus()\r\nAddition:\r\n\r\n```javascript\r\nnumber.plus('3%')\r\n```\r\n\r\n__`returns`: `SVG.Number`__\r\n\r\n### minus()\r\nSubtraction:\r\n\r\n```javascript\r\nnumber.minus('3%')\r\n```\r\n\r\n__`returns`: `SVG.Number`__\r\n\r\n### times()\r\nMultiplication:\r\n\r\n```javascript\r\nnumber.times(2)\r\n```\r\n\r\n__`returns`: `SVG.Number`__\r\n\r\n### divide()\r\nDivision:\r\n\r\n```javascript\r\nnumber.divide('3%')\r\n```\r\n\r\n__`returns`: `SVG.Number`__\r\n\r\n### to()\r\nChange number to another unit:\r\n\r\n```javascript\r\nnumber.to('px')\r\n```\r\n\r\n__`returns`: `SVG.Number`__\r\n\r\n### morph()\r\nMake a number morphable:\r\n\r\n```javascript\r\nnumber.morph('11%')\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n\r\n### at()\r\nGet morphable number at given position:\r\n\r\n```javascript\r\nvar number = new SVG.Number('79%').morph('3%')\r\nnumber.at(0.55).toString() //-> '37.2%'\r\n```\r\n\r\n__`returns`: `SVG.Number`__\r\n\r\n\r\n## Colors\r\n\r\nSvg.js has a dedicated color class handling different types of colors. Accepted values are:\r\n\r\n- hex string; three based (e.g. #f06) or six based (e.g. #ff0066) `new SVG.Color('#f06')`\r\n- rgb string; e.g. rgb(255, 0, 102) `new SVG.Color('rgb(255, 0, 102)')`\r\n- rgb object; e.g. { r: 255, g: 0, b: 102 } `new SVG.Color({ r: 255, g: 0, b: 102 })`\r\n\r\nNote that when working with objects is important to provide all three values every time.\r\n\r\nThe `SVG.Color` instance has a few methods of its own.\r\n\r\n### toHex()\r\nGet hex value:\r\n\r\n```javascript\r\ncolor.toHex() //-> returns '#ff0066'\r\n```\r\n\r\n__`returns`: hex color string__\r\n\r\n### toRgb()\r\nGet rgb string value:\r\n\r\n```javascript\r\ncolor.toRgb() //-> returns 'rgb(255,0,102)'\r\n```\r\n\r\n__`returns`: rgb color string__\r\n\r\n### brightness()\r\nGet the brightness of a color:\r\n\r\n```javascript\r\ncolor.brightness() //-> returns 0.344\r\n```\r\n\r\nThis is the perceived brighness where `0` is black and `1` is white.\r\n\r\n__`returns`: `number`__\r\n\r\n### morph()\r\nMake a color morphable:\r\n\r\n```javascript\r\ncolor.morph('#000')\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### at()\r\nGet morphable color at given position:\r\n\r\n```javascript\r\nvar color = new SVG.Color('#ff0066').morph('#000')\r\ncolor.at(0.5).toHex() //-> '#7f0033'\r\n```\r\n\r\n__`returns`: `SVG.Color`__\r\n\r\n\r\n## Arrays\r\nIn SVG.js every value list string can be cast and passed as an array. This makes writing them more convenient but also adds a lot of key functionality to them.\r\n\r\n### SVG.Array\r\nIs for simple, whitespace separated value strings:\r\n\r\n```javascript\r\n'0.343 0.669 0.119 0 0 0.249 -0.626 0.13 0 0 0.172 0.334 0.111 0 0 0 0 0 1 0'\r\n```\r\n\r\nCan also be passed like this in a more manageable format:\r\n\r\n```javascript\r\nnew SVG.Array([ .343,  .669, .119, 0,   0 \r\n              , .249, -.626, .130, 0,   0\r\n              , .172,  .334, .111, 0,   0\r\n              , .000,  .000, .000, 1,  -0 ])\r\n```\r\n\r\n### SVG.PointArray \r\nIs a bit more complex and is used for polyline and polygon elements. This is a poly-point string:\r\n\r\n```javascript\r\n'0,0 100,100'\r\n```\r\n\r\nThe dynamic representation:\r\n\r\n```javascript\r\n[\r\n  [0, 0]\r\n, [100, 100]\r\n]\r\n```\r\n\r\nPrecompiling it as an `SVG.PointArray`:\r\n\r\n```javascript\r\nnew SVG.PointArray([\r\n  [0, 0]\r\n, [100, 100]\r\n])\r\n```\r\n\r\nNote that every instance of `SVG.Polyline` and `SVG.Polygon` carries a reference to the `SVG.PointArray` instance:\r\n\r\n```javascript\r\npolygon.array() //-> returns the SVG.PointArray instance\r\n```\r\n\r\n_Javascript inheritance stack: `SVG.PointArray` < `SVG.Array`_\r\n\r\n### SVG.PathArray\r\nPath arrays carry arrays representing every segment in a path string:\r\n\r\n```javascript\r\n'M0 0L100 100z'\r\n```\r\n\r\nThe dynamic representation:\r\n\r\n```javascript\r\n[\r\n  ['M', 0, 0]\r\n, ['L', 100, 100]\r\n, ['z']\r\n]\r\n```\r\n\r\nPrecompiling it as an `SVG.PathArray`:\r\n\r\n```javascript\r\nnew SVG.PathArray([\r\n  ['M', 0, 0]\r\n, ['L', 100, 100]\r\n, ['z']\r\n])\r\n```\r\n\r\nNote that every instance of `SVG.Path` carries a reference to the `SVG.PathArray` instance:\r\n\r\n```javascript\r\npath.array() //-> returns the SVG.PathArray instance\r\n```\r\n\r\n#### Syntax\r\nThe syntax for patharrays is very predictable. They are basically literal representations in the form of two dimentional arrays.\r\n\r\n##### Move To\r\nOriginal syntax is `M0 0` or `m0 0`. The SVG.js syntax `['M',0,0]` or `['m',0,0]`.\r\n\r\n##### Line To\r\nOriginal syntax is `L100 100` or `l100 100`. The SVG.js syntax `['L',100,100]` or `['l',100,100]`.\r\n\r\n##### Horizontal line\r\nOriginal syntax is `H200` or `h200`. The SVG.js syntax `['H',200]` or `['h',200]`.\r\n\r\n##### Vertical line\r\nOriginal syntax is `V300` or `v300`. The SVG.js syntax `['V',300]` or `['v',300]`.\r\n\r\n##### Bezier curve\r\nOriginal syntax is `C20 20 40 20 50 10` or `c20 20 40 20 50 10`. The SVG.js syntax `['C',20,20,40,20,50,10]` or `['c',20,20,40,20,50,10]`.\r\n\r\nOr mirrored with `S`:\r\n\r\nOriginal syntax is `S40 20 50 10` or `s40 20 50 10`. The SVG.js syntax `['S',40,20,50,10]` or `['s',40,20,50,10]`.\r\n\r\nOr quadratic with `Q`:\r\n\r\nOriginal syntax is `Q20 20 50 10` or `q20 20 50 10`. The SVG.js syntax `['Q',20,20,50,10]` or `['q',20,20,50,10]`.\r\n\r\nOr a complete shortcut with `T`:\r\n\r\nOriginal syntax is `T50 10` or `t50 10`. The SVG.js syntax `['T',50,10]` or `['t',50,10]`.\r\n\r\n##### Arc\r\nOriginal syntax is `A 30 50 0 0 1 162 163` or `a 30 50 0 0 1 162 163`. The SVG.js syntax `['A',30,50,0,0,1,162,163]` or `['a',30,50,0,0,1,162,163]`.\r\n\r\n##### Close\r\nOriginal syntax is `Z` or `z`. The SVG.js syntax `['Z']` or `['z']`.\r\n\r\nThe best documentation on paths can be found at https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths.\r\n\r\n\r\n_Javascript inheritance stack: `SVG.PathArray` < `SVG.Array`_\r\n\r\n### morph()\r\nIn order to animate array values the `morph()` method lets you pass a destination value. This can be either the string value, a plain array or an instance of the same type of SVG.js array:\r\n\r\n```javascript\r\nvar array = new SVG.PointArray([[0, 0], [100, 100]])\r\narray.morph('100,0 0,100 200,200')\r\n```\r\n\r\nThis method will prepare the array ensuring both the source and destination arrays have the same length.\r\n\r\nIn order to morph paths you need to include the [svg.pathmorphing.js](https://github.com/wout/svg.pathmorphing.js) extension.\r\n\r\n__`returns`: `itself`__\r\n\r\n### at()\r\nThis method will morph the array to a given position between `0` and `1`. Continuing with the previous example:\r\n\r\n```javascript\r\narray.at(0.27).toString() //-> returns '27,0 73,100 127,127'\r\n```\r\n\r\nNote that this method is currently not available on `SVG.PathArray` but will be soon.\r\n\r\n__`returns`: new instance__\r\n\r\n### settle()\r\nWhen morphing is done the `settle()` method will eliminate any transitional points like duplicates:\r\n\r\n```javascript\r\narray.settle()\r\n```\r\n\r\nNote that this method is currently not available on `SVG.PathArray` but will be soon.\r\n\r\n__`returns`: `itself`__\r\n\r\n### move()\r\nMoves geometry of the array with the given `x` and `y` values:\r\n\r\n```javascript\r\nvar array = new SVG.PointArray([[0, 0], [100, 100]])\r\narray.move(33,75)\r\narray.toString() //-> returns '33,75 133,175'\r\n```\r\n\r\nNote that this method is only available on `SVG.PointArray` and `SVG.PathArray`\r\n\r\n__`returns`: `itself`__\r\n\r\n### size()\r\nResizes geometry of the array by the given `width` and `height` values:\r\n\r\n```javascript\r\nvar array = new SVG.PointArray([[0, 0], [100, 100]])\r\narray.move(100,100).size(222,333)\r\narray.toString() //-> returns '100,100 322,433'\r\n```\r\n\r\nNote that this method is only available on `SVG.PointArray` and `SVG.PathArray`\r\n\r\n__`returns`: `itself`__\r\n\r\n### reverse()\r\nReverses the order of the array:\r\n\r\n```javascript\r\nvar array = new SVG.PointArray([[0, 0], [100, 100]])\r\narray.reverse()\r\narray.toString() //-> returns '100,100 0,0'\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### bbox()\r\nGets the bounding box of the geometry of the array:\r\n\r\n```javascript\r\narray.bbox()\r\n```\r\n\r\nNote that this method is only available on `SVG.PointArray` and `SVG.PathArray`\r\n\r\n__`returns`: `object`__\r\n\r\n\r\n## Matrices\r\nMatrices in SVG.js have their own class `SVG.Matrix`, wrapping the native `SVGMatrix`. They add a lot of functionality like extracting transform values, matrix morphing and improvements on the native methods.\r\n\r\n### SVG.Matrix\r\nIn SVG.js matrices accept various values on initialization.\r\n\r\nWithout a value:\r\n\r\n```javascript\r\nvar matrix = new SVG.Matrix\r\nmatrix.toString() //-> returns matrix(1,0,0,1,0,0)\r\n```\r\n\r\nSix arguments:\r\n\r\n```javascript\r\nvar matrix = new SVG.Matrix(1, 0, 0, 1, 100, 150)\r\nmatrix.toString() //-> returns matrix(1,0,0,1,100,150)\r\n```\r\n\r\nA string value:\r\n\r\n```javascript\r\nvar matrix = new SVG.Matrix('1,0,0,1,100,150')\r\nmatrix.toString() //-> returns matrix(1,0,0,1,100,150)\r\n```\r\n\r\nAn object value:\r\n\r\n```javascript\r\nvar matrix = new SVG.Matrix({ a: 1, b: 0, c: 0, d: 1, e: 100, f: 150 })\r\nmatrix.toString() //-> returns matrix(1,0,0,1,100,150)\r\n```\r\n\r\nA native `SVGMatrix`:\r\n\r\n```javascript\r\nvar svgMatrix = svgElement.getCTM()\r\nvar matrix = new SVG.Matrix(svgMatrix)\r\nmatrix.toString() //-> returns matrix(1,0,0,1,0,0)\r\n```\r\n\r\nEven an instance of `SVG.Element`:\r\n\r\n```javascript\r\nvar rect = draw.rect(50, 25)\r\nvar matrix = new SVG.Matrix(rect)\r\nmatrix.toString() //-> returns matrix(1,0,0,1,0,0)\r\n```\r\n\r\n### extract()\r\nGets the calculated values of the matrix as an object:\r\n\r\n```javascript\r\nmatrix.extract()\r\n```\r\n\r\nThe returned object contains the following values:\r\n\r\n- `x` (translation on the x-axis)\r\n- `y` (translation on the y-axis)\r\n- `skewX` (calculated skew on x-axis)\r\n- `skewY` (calculated skew on y-axis)\r\n- `scaleX` (calculated scale on x-axis)\r\n- `scaleY` (calculated scale on y-axis)\r\n- `rotation` (calculated rotation)\r\n\r\n__`returns`: `object`__\r\n\r\n### clone()\r\nReturns an exact copy of the matrix:\r\n\r\n```javascript\r\nmatrix.clone()\r\n```\r\n\r\n__`returns`: `SVG.Matrix`__\r\n\r\n### morph()\r\nIn order to animate matrices the `morph()` method lets you pass a destination matrix. This can be any value a `SVG.Matrix` would accept on initialization:\r\n\r\n```javascript\r\nmatrix.morph('matrix(2,0,0,2,100,150)')\r\n```\r\n\r\n__`returns`: `itself`__\r\n\r\n### at()\r\nThis method will morph the matrix to a given position between `0` and `1`:\r\n\r\n```javascript\r\nmatrix.at(0.27)\r\n```\r\n\r\nThis will only work when a destination matirx is defined using the `morph()` method.\r\n\r\n__`returns`: `SVG.Matrix`__\r\n\r\n### multiply()\r\nMultiplies by another given matrix:\r\n\r\n```javascript\r\nmatrix.matrix(matrix2)\r\n```\r\n\r\n__`returns`: `SVG.Matrix`__\r\n\r\n### inverse()\r\nCreates an inverted matix:\r\n\r\n```javascript\r\nmatrix.inverse()\r\n```\r\n\r\n__`returns`: `SVG.Matrix`__\r\n\r\n### translate()\r\nTranslates matrix by a given x and y value:\r\n\r\n```javascript\r\nmatrix.translate(10, 20)\r\n```\r\n\r\n__`returns`: `SVG.Matrix`__\r\n\r\n### scale()\r\nScales matrix uniformal with one value:\r\n\r\n```javascript\r\n// scale\r\nmatrix.scale(2)\r\n```\r\n\r\nScales matrix non-uniformal with two values:\r\n\r\n```javascript\r\n// scaleX, scaleY\r\nmatrix.scale(2, 3)\r\n```\r\n\r\nScales matrix uniformal on a given center point with three values:\r\n\r\n```javascript\r\n// scale, cx, cy\r\nmatrix.scale(2, 100, 150)\r\n```\r\n\r\nScales matrix non-uniformal on a given center point with four values:\r\n\r\n```javascript\r\n// scaleX, scaleY, cx, cy\r\nmatrix.scale(2, 3, 100, 150)\r\n```\r\n\r\n__`returns`: `SVG.Matrix`__\r\n\r\n### rotate()\r\nRotates matrix by degrees with one value given:\r\n\r\n```javascript\r\n// degrees\r\nmatrix.rotate(45)\r\n```\r\n\r\nRotates a matrix by degrees around a given point with three values:\r\n\r\n```javascript\r\n// degrees, cx, cy\r\nmatrix.rotate(45, 100, 150)\r\n```\r\n\r\n__`returns`: `SVG.Matrix`__\r\n\r\n### flip()\r\nFlips matrix over a given axis:\r\n\r\n```javascript\r\nmatrix.flip('x')\r\n```\r\n\r\nor\r\n\r\n```javascript\r\nmatrix.flip('y')\r\n```\r\n\r\nBy default elements are flipped over their center point. The flip axis position can be defined with the second argument:\r\n\r\n```javascript\r\nmatrix.flip('x', 150)\r\n```\r\n\r\nor\r\n\r\n```javascript\r\nmatrix.flip('y', 100)\r\n```\r\n\r\n__`returns`: `SVG.Matrix`__\r\n\r\n### skew()\r\nSkews matrix a given degrees over x and or y axis with two values:\r\n\r\n```javascript\r\n// degreesX, degreesY\r\nmatrix.skew(0, 45)\r\n```\r\n\r\nSkews matrix a given degrees over x and or y axis on a given point with four values:\r\n\r\n```javascript\r\n// degreesX, degreesY, cx, cy\r\nmatrix.skew(0, 45, 150, 100)\r\n```\r\n\r\n__`returns`: `SVG.Matrix`__\r\n\r\n### around()\r\nPerforms a given matrix transformation around a given center point:\r\n\r\n```javascript\r\n// cx, cy, matrix\r\nmatrix.around(100, 150, new SVG.Matrix().skew(0, 45))\r\n```\r\n\r\nThe matrix passed as the third argument will be used to multiply.\r\n\r\n__`returns`: `SVG.Matrix`__\r\n\r\n### native()\r\nReturns a native `SVGMatrix` extracted from the `SVG.Matrix` instance:\r\n\r\n```javascript\r\nmatrix.native()\r\n```\r\n\r\n__`returns`: `SVGMatrix`__\r\n\r\n### toString()\r\nConverts the matrix to a transform string:\r\n\r\n```javascript\r\nmatrix.toString()\r\n// -> matrix(1,0,0,1,0,0)\r\n```\r\n\r\n__`returns`: `string`__\r\n\r\n## Extending functionality\r\n\r\n### SVG.invent()\r\nCreating your own custom elements with SVG.js is a piece of cake thanks to the `SVG.invent` function. For the sake of this example, lets \"invent\" a shape. We want a `rect` with rounded corners that are always proportional to the height of the element. The new shape lives in the `SVG` namespace and is called `Rounded`. Here is how we achieve that.\r\n\r\n```javascript\r\nSVG.Rounded = SVG.invent({\r\n  // Define the type of element that should be created\r\n  create: 'rect'\r\n\r\n  // Specify from which existing class this shape inherits\r\n, inherit: SVG.Shape\r\n\r\n  // Add custom methods to invented shape\r\n, extend: {\r\n    // Create method to proportionally scale the rounded corners\r\n    size: function(width, height) {\r\n      return this.attr({\r\n        width:  width\r\n      , height: height\r\n      , rx:     height / 5\r\n      , ry:     height / 5\r\n      })\r\n    }\r\n  }\r\n\r\n  // Add method to parent elements\r\n, construct: {\r\n    // Create a rounded element\r\n    rounded: function(width, height) {\r\n      return this.put(new SVG.Rounded).size(width, height)\r\n    }\r\n    \r\n  }\r\n})\r\n```\r\n\r\nTo create the element in your drawing:\r\n\r\n```javascript\r\nvar rounded = draw.rounded(200, 100)\r\n```\r\n\r\nThat's it, the invention is now ready to be used!\r\n\r\n#### Accepted values\r\nThe `SVG.invent()` function always expects an object. The object can have the following configuration values:\r\n\r\n- `create`: can be either a string with the node name (e.g. `rect`, `ellipse`, ...) or a custom initializer function; `[required]`\r\n- `inherit`: the desired SVG.js class to inherit from (e.g. `SVG.Shape`, `SVG.Element`, `SVG.Container`, `SVG.Rect`, ...); `[optional but recommended]`\r\n- `extend`: an object with the methods that should be applied to the element's prototype; `[optional]`\r\n- `construct`: an object with the methods to create the element on the parent element; `[optional]`\r\n- `parent`: an SVG.js parent class on which the methods in the passed `construct` object should be available - defaults to `SVG.Container`; `[optional]`\r\n\r\n#### Usage notes\r\n\r\nIt should be emphasized that in the configuration object passed to `SVG.invent()`:\r\n\r\n- `construct` does not supply constructors, but rather methods that are likely to *call* constructors;\r\n- `create` specifies the constructor for the type you are defining, and is not analogous to `Object.create()`.\r\n\r\nWhen defining specialized svg elements (such as `SVG.Rounded` in the example above), the function specified by `create` needs to do all the work of adding the element to the DOM for the svg document and connecting the DOM node to the SVG.js interface. All this is done automatically when the value of `create` is a string identifying an element type. If needed, see the source for a sense of how to do it explicitly.\r\n\r\nThough the defaults are geared toward creating svg elements for the SVG.js framework, `SVG.invent()` can be used as a generalized function for defining types in Javascript. When used in this more general way, the function supplied as a value for `create` should be written as an ordinary JS constructor. (Indeed, the function is simply returned as the constructor for your newly defined type.)\r\n\r\nSvg.js uses the `SVG.invent()` function to create all internal elements. A look at the source will show how this function is used in various ways.\r\n\r\n\r\n\r\n### SVG.extend()\r\nSVG.js has a modular structure. It is very easy to add your own methods at different levels. Let's say we want to add a method to all shape types then we would add our method to SVG.Shape:\r\n\r\n```javascript\r\nSVG.extend(SVG.Shape, {\r\n  paintRed: function() {\r\n    return this.fill('red')\r\n  }\r\n})\r\n```\r\n\r\nNow all shapes will have the paintRed method available. Say we want to have the paintRed method on an ellipse apply a slightly different color:\r\n\r\n```javascript\r\nSVG.extend(SVG.Ellipse, {\r\n  paintRed: function() {\r\n    return this.fill('orangered')\r\n  }\r\n})\r\n\r\n```\r\nThe complete inheritance stack for `SVG.Ellipse` is:\r\n\r\n_`SVG.Ellipse` < `SVG.Shape` < `SVG.Element`_\r\n\r\nThe SVG document can be extended by using:\r\n\r\n```javascript\r\nSVG.extend(SVG.Doc, {\r\n  paintAllPink: function() {\r\n    this.each(function() {\r\n      this.fill('pink')\r\n    })\r\n  }\r\n})\r\n```\r\n\r\nYou can also extend multiple elements at once:\r\n```javascript\r\nSVG.extend(SVG.Ellipse, SVG.Path, SVG.Polygon, {\r\n  paintRed: function() {\r\n    return this.fill('orangered')\r\n  }\r\n})\r\n```\r\n\r\n\r\n## Plugins\r\nHere are a few nice plugins that are available for SVG.js:\r\n\r\n### pathmorphing\r\n[svg.pathmorphing.js](https://github.com/wout/svg.pathmorphing.js) to make path animatable\r\n\r\n### textmorphing\r\n[svg.textmorph.js](https://github.com/wout/svg.textmorph.js) to make text animatable\r\n\r\n### absorb\r\n[svg.absorb.js](https://github.com/wout/svg.absorb.js) absorb raw SVG data into an SVG.js instance.\r\n\r\n### draggable\r\n[svg.draggable.js](https://github.com/wout/svg.draggable.js) to make elements draggable.\r\n\r\n### connectable\r\n[svg.connectable.js](https://github.com/jillix/svg.connectable.js) to connect elements.\r\n\r\n[svg.connectable.js fork](https://github.com/loredanacirstea/svg.connectable.js) to connect elements (added: curved connectors, you can use any self-made path as a connector, choosable 'center'/'perifery' attachment, 'perifery' attachment for source / target SVG Paths uses smallest-distance algorithm between PathArray points)\r\n\r\n### easing\r\n[svg.easing.js](https://github.com/wout/svg.easing.js) for more easing methods on animations.\r\n\r\n### export\r\n[svg.export.js](https://github.com/wout/svg.export.js) export raw SVG.\r\n\r\n### filter\r\n[svg.filter.js](https://github.com/wout/svg.filter.js) adding svg filters to elements.\r\n\r\n### foreignobject\r\n[svg.foreignobject.js](https://github.com/john-memloom/svg.foreignobject.js) foreignObject implementation (by john-memloom).\r\n\r\n### import\r\n[svg.import.js](https://github.com/wout/svg.import.js) import raw SVG data.\r\n\r\n### math\r\n[svg.math.js](https://github.com/otm/svg.math.js) a math extension (by Nils Lagerkvist).\r\n\r\n### path\r\n[svg.path.js](https://github.com/otm/svg.path.js) for manually drawing paths (by Nils Lagerkvist).\r\n\r\n## screenBBox\r\n[svg.screenbbox.js](https://github.com/fuzzyma/svg.screenbbox.js) to get the bbox in screen coordinates from transformed path/polygon/polyline\r\n\r\n### shapes\r\n[svg.shapes.js](https://github.com/wout/svg.shapes.js) for more polygon based shapes.\r\n\r\n### topath\r\n[svg.topath.js](https://github.com/wout/svg.topath.js) to convert any other shape to a path.\r\n\r\n### topoly\r\n[svg.topoly.js](https://github.com/wout/svg.topoly.js) to convert a path to polygon or polyline.\r\n\r\n### wiml\r\n[svg.wiml.js](https://github.com/wout/svg.wiml.js) a templating language for svg output.\r\n\r\n### comic\r\n[comic.js](https://github.com/balint42/comic.js) to cartoonize any given svg.\r\n\r\n### draw\r\n[svg.draw.js](https://github.com/fuzzyma/svg.draw.js) to draw elements with your mouse\r\n\r\n### select\r\n[svg.select.js](https://github.com/fuzzyma/svg.select.js) to select elements\r\n\r\n### resize\r\n[svg.resize.js](https://github.com/fuzzyma/svg.resize.js) to resize elements with your mouse\r\n\r\n## Contributing\r\nWe love contributions. Yes indeed, we used the word LOVE! But please make sure you follow the same coding style. Here are some guidelines.\r\n\r\n### Indentation\r\nWe do it with __two spaces__. Make sure you don't start using tabs because then things get messy.\r\n\r\n### Avoid hairy code\r\nWe like to keep things simple and clean, don't write anything you don't need. So use __single quotes__ where possible and __avoid semicolons__, we're not writing PHP here.\r\n\r\n__Good__:\r\n```javascript\r\nvar text = draw.text('with single quotes here')\r\n  , nest = draw.nested().attr('x', '50%')\r\n\r\nfor (var i = 0; i < 5; i++)\r\n  if (i != 3)\r\n    nest.circle(i * 100)\r\n```\r\n\r\n__Bad__:\r\n```javascript\r\nvar text = draw.text(\"with double quotes here\");\r\nvar nest = draw.nested().attr(\"x\", \"50%\");\r\n\r\nfor (var i = 0; i < 5; i++) {\r\n  if (i != 3) {\r\n    nest.circle(100);\r\n  };\r\n};\r\n```\r\n\r\n### Minimize variable declarations\r\nAll local variables should be declared at the beginning of a function or method unless there is ony one variable to declare. Although it is not required to assign them at the same moment. When if statements are involved, requiring some variables only to be present in the statement, the necessary variables should be declared right after the if statement.\r\n\r\n__Good__:\r\n```javascript\r\nfunction reading_board() {\r\n  var aap, noot, mies\r\n\r\n  aap  = 1\r\n  noot = 2\r\n  mies = aap + noot\r\n}\r\n```\r\n\r\n__Bad__:\r\n```javascript\r\nfunction reading_board() {\r\n  var aap  = 1\r\n  var noot = 2\r\n  var mies = aap + noot\r\n}\r\n```\r\n\r\n### Let your code breathe people!\r\nDon't try to be a code compressor yourself, they do way a better job anyway. Give your code some spaces and newlines.\r\n\r\n__Good__:\r\n```javascript\r\nvar nest = draw.nested().attr({\r\n  x:      10\r\n, y:      20\r\n, width:  200\r\n, height: 300\r\n})\r\n\r\nfor (var i = 0; i < 5; i++)\r\n  nest.circle(100)\r\n```\r\n\r\n__Bad__:\r\n```javascript\r\nvar nest=draw.nested().attr({x:10,y:20,width:200,height:300});\r\nfor(var i=0;i<5;i++)nest.circle(100);\r\n```\r\n\r\n### It won't hurt to add a few comments\r\nWhere necessary tell us what you are doing but be concise. We only use single-line comments. Also keep your variable and method names short while maintaining readability.\r\n\r\n__Good__:\r\n```javascript\r\n// Adds orange-specific methods\r\nSVG.extend(SVG.Rect, {\r\n  // Add a nice, transparent orange\r\n  orangify: function() {\r\n    // fill with orange color\r\n    this.fill('orange')\r\n\r\n    // add a slight opacity\r\n    return this.opacity(0.85)\r\n  }\r\n})\r\n```\r\n\r\n__Bad__:\r\n```javascript\r\n/*\r\n *\r\n * does something with orange and opacity\r\n *\r\n */\r\nSVG.extend(SVG.Rect, {\r\n  orgf: function() {\r\n    return this.fill('orange').opacity(0.85)\r\n  }\r\n})\r\n```\r\n\r\n### Refactor your code\r\nOnce your implementation is ready, revisit and rework it. We like to keep it [DRY](http://en.wikipedia.org/wiki/Don't_repeat_yourself).\r\n\r\n### Test. Your. Code.\r\nIt's not that hard to write at least one example per implementation, although we prefer more. Your code might seem to work by quickly testing it in your brwoser but more than often you can't forsee everything.\r\n\r\nBefore running the specs you will need to build the library. Be aware that pull requests without specs will be declined.\r\n\r\n\r\n## Building\r\nAfter contributing you probably want to build the library to run some specs. Make sure you have Node.js installed on your system, `cd` to the svg.js directory and run:\r\n\r\n``` sh\r\n$ npm install\r\n```\r\n\r\nBuild SVG.js by running `gulp`:\r\n\r\n``` sh\r\n$ gulp\r\n```\r\n\r\nThe resulting files are:\r\n\r\n1. `dist/svg.js`\r\n2. `dist/svg.min.js`\r\n\r\n\r\n## Compatibility\r\n\r\n### Desktop\r\n- Firefox 3+\r\n- Chrome 4+\r\n- Safari 3.2+\r\n- Opera 9+\r\n- IE9+\r\n\r\n### Mobile\r\n- iOS Safari 3.2+\r\n- Android Browser 3+\r\n- Opera Mobile 10+\r\n- Chrome for Android 18+\r\n- Firefox for Android 15+\r\n\r\nVisit the [SVG.js test page](http://svgjs.com/test) if you want to check compatibility with different browsers.\r\n\r\n## Acknowledgements & Thanks\r\n\r\nDocumentation kindly provided by [DocumentUp](http://documentup.com)\r\n\r\nSVG.js and its documentation is released under the terms of the MIT license.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/wout/svg.js.git"
  },
  "scripts": {},
  "url": "http://svgjs.com",
  "version": "2.2.5"
}
